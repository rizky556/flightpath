<?php

/**
 *  This module lets administrators create content, when then appear can appear in a block.  
*/

function content_menu() {

  $items = array();

  $items["admin/config/content"] = array(
    "title" => "Content",
    "description" => "Manage content in " . variable_get("system_name", "FlightPath") . ". Ex: Announcements, Pages, etc.",
    "page_callback" => "content_display_content_admin_list",    
    "access_arguments" => array("admin_content"),
    "page_settings" => array(
      "menu_icon" => fp_get_module_path('content') . "/icons/application_edit.png",      
      "page_show_title" => TRUE,
      "menu_links" => array(          
        0 => array(
          "text" => t("Admin Console"),
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,
    
  );     
 
  
  $items["content/delete"] = array(
    "page_callback" => "content_handle_delete_content",
    "access_arguments" => array("admin_content"),
    "type" => MENU_TYPE_CALLBACK,
  );

  

  // content/add/TYPE
  $items["content/add/%"] = array(
    "page_callback" => "fp_render_form",
    "page_arguments" => array("content_edit_content_form", "", 2, "new"),
    "access_callback" => "content_user_access",
    "access_arguments" => array("add_type", 2),
    "type" => MENU_TYPE_NORMAL_ITEM,
    "page_settings" => array(
      "menu_links" => array(          
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Content",
          "path" => "admin/config/content",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),          
      ),
        
    ),
    "tab_parent" => "admin/config/content",      
  );



  $items["content/%"] = array(
    "title" => "View",
    "page_callback" => "content_view_content",
    "page_arguments" => array(1),
    "access_callback" => "content_user_access",
    "access_arguments" => array("view_cid", 1),
    "page_settings" => array(
      "page_show_title" => TRUE,
      "menu_links" => array(          
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Content",
          "path" => "admin/config/content",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),          
      ),      
    ),
    "type" => MENU_TYPE_TAB,
    "tab_family" => "content",    
    "weight" => 10,      
  );
  

  
  $items["content/%/edit"] = array(
    "title" => "Edit",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("content_edit_content_form", "", "", 1),
    "access_callback" => "content_user_access",
    "access_arguments" => array("edit_cid", 1),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(          
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Content",
          "path" => "admin/config/content",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),          
      ),
    ),
    "type" => MENU_TYPE_TAB,    
    "tab_family" => "content",
    "weight" => 20,      
  );
  

  $items["content/%/devel"] = array(
    "title" => "Devel",
    "page_callback" => "content_display_devel",
    "page_arguments" => array(1),    
    "access_arguments" => array("view_fpm_debug"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(          
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Content",
          "path" => "admin/config/content",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),          
      ),
    ),
    "type" => MENU_TYPE_TAB,    
    "tab_family" => "content",
    "weight" => 30,      
  );

  
  
  /**
   * Generic screen which, if we have saved content from within an iframe dialog,
   * we want to display a "success" message, then just refresh the screen.
   */
  $items["content-dialog-handle-after-save"] = array(     
    "page_callback" => "content_dialog_handle_after_save",
    "access_callback" => TRUE,
    "page_settings" => array (
      "display_currently_advising" => FALSE,
      "screen_mode" => "not_advising",
      "page_is_popup" => TRUE,
    ),    
    "type" => MENU_TYPE_CALLBACK,
  );  
    
  
  

  
    
  return $items;
}


/**
 * Simply returns the fpm() results for the supplied content.
 */
function content_display_devel($cid) {
  $rtn = "";
  
  $content = content_load($cid);
  
  $rtn .= "&nbsp; &nbsp;";
  
  fpm($content);
  
  return $rtn;
} 



/**
 * Custom user access function to determine if the user can add, edit, etc, the content
 * 
 *
 * @param unknown_type $op
 * @param unknown_type $var
 */
function content_user_access($op, $var) {
      
  $cid = intval($var);  
  
  // TODO:  implement!
  
  // for now, just return TRUE
  
  return TRUE;
}




/**
 * This is an implementation of hook_menu_handle_replacement_pattern.
 * It will search for and replace replacement patterns which we are aware of it in $str.
 */
function content_menu_handle_replacement_pattern($str) {
  
  $cid = @$_REQUEST["cid"];
  if ($cid) {
    $content = content_load($cid);
    if (is_array($content)) {
      if (strpos($str, "%CONTENT_CID%") !== 0) {
        // It contains this replacement pattern!
        $str = str_replace("%CONTENT_CID%", $cid, $str);
      }
      
      if (strpos($str, "%CONTENT_TYPE%") !== 0) {
        // It contains this replacement pattern!
        $str = str_replace("%CONTENT_TYPE%", $content["type"], $str);
      }
    }
  }
  
  return $str;
}




/**
 * This is the URL we redirect to after saving a piece of content in a dialog,
 * so all we really want to do is close the dialog and reload the parent page.
 * 
 * Remember, we are inside an iframe.
 */
function content_dialog_handle_after_save() {
  
  $rtn = "";
  
  $rtn = "";
  
  $rtn .= "<h2 class='dialog-handle-after-save'>" . t("Your submission has been saved correctly!  Closing window...") . "</h2>";
  
  $rtn .= "<br><br><p>" . t("If this windows doesn't close within 3 seconds,") . " <a href='javascript:window.parent.location.reload();'>" . t("click here") . "</a>.</p>";
  
  // Add this javascript code to when the page loads.
  $rtn .= "
      <script type='text/javascript'>
        $(document).ready(function() {
          setTimeout(function() {
            
            window.parent.location.reload();
          
          }, 1000);  
        });
      </script>
  ";
  
  
  return $rtn;
}




/**
 * Display the content specified in the GET's cid.
 *
 */
function content_view_content($cid) {
  
  $render = array();  
  $render["#id"] = "content_" . $cid;  // We will be doing this as a render array, so other modules can alter.
    
      
  $content = content_load($cid);  // assumed to be path/content/CID  So, arg(1) == the cid
  $type = $content->type;
  $types = content_get_types();
  $author = fp_load_user($content->user_id);
  
  $render['#class'] = "content-type-" . $type;
  
    
  if (!strstr($content->title, "[hide]")) {
    fp_set_title($content->title);
  }  
  fp_add_body_class("content-type-" . $content->type);
  
  //$rtn .= "<div class='content-view content-view-{$content->type}'>";
  

  $render['content_submitted'] = array(
    'type' => 'markup',
    'value' => "<div class='content-submitted'>" . t("Submitted by") . " " . $author->name . " " . t("on") . " " . format_date($content->posted, 'short') . "</div>",
  );


  // Display all the various fields
  if (is_array($types[$type]['fields'])) {
    foreach($types[$type]["fields"] as $field_name => $field_details) {      
            
      $display_value = $content->{"field__$field_name"}['display_value'];
      
      if ($field_details['type'] != 'hidden') {
      
        $render['field__' . $field_name] = array(
          'type' => 'markup',
          'label' => $field_details['label'],
          'value' => "<div class='field-value'>$display_value</div>",
        );
        
      }
      
      
    }    
  }  
  
  
  
  return fp_render_content($render);
  
}



/**
 * This form lets the user edit some piece of content
 *
 */
function content_edit_content_form($type = "", $cid = "") {
  
  $form = array();
  $m = 0;
  
  fp_add_css(fp_get_module_path("content") . "/css/content.css");
  
  if ($type == "") {
    @$type = $_REQUEST["type"];    
  }
  
  if ($cid == "") {
    @$cid = $_REQUEST["cid"];  
  }
  
  $types = content_get_types();

  if ($cid != "new") {
    $content = content_load($cid);
    fp_set_title(t("Editing") . " " . $content->title . "");
    // Re-set $type, just in case the user put the wrong type in the
    // URL
    $type = $content->type;
  } 
  else {
    // New piece of content
    $content = new stdClass();
    $content->published = 1;
    fp_set_title(t("Add new") . " " . $types[$type]["title"]);
    
  }

  
  // Does the user have permission to edit this content?
  if (!user_has_permission("edit_$type" . "_content")) {  
    fp_add_message(t("Sorry, you do not have permission to edit that content type."));
    fp_goto("admin/config/content");
    return;
  }
  
  
  
  
  $form["type"] = array(
    "type" => "hidden",
    "value" => $type,    
  );
  
  $form["cid"] = array(
    "type" => "hidden",
    "value" => $cid,    
  );


  
  $form["title"] = array(
    "type" => "textfield",
    "label" => t("Title:"),
    "value" => $content->title,
    "required" => TRUE,     
  );
  
  // Are there any special settings for the title?
  if (isset($types[$type]['settings']) && isset($types[$type]['settings']['title'])) {
    if (is_array($types[$type]['settings']['title'])) {
      // Use array_merge to just override with whatever we have in our settings for the title.
      $form['title'] = array_merge($form['title'], $types[$type]['settings']['title']);
    }
    
    if (is_array($types[$type]['settings']['#redirect'])) {
      $form['#redirect'] = $types[$type]['settings']['#redirect'];
    }
    
  }  
    
  
  // Are there extra fields?  If so, add their values in as well.
  if (is_array($types[$type]['fields'])) {
    foreach($types[$type]["fields"] as $field_name => $field_details) {      
      $form[$field_name] = $field_details;
      
      $value = $content->{"field__$field_name"}['value'];
      
      ////////////////////
      // TODO:  I don't think I need to do the filter_markup stuff here.
      //if (isset($form[$field_name]['filter'])) {
      //  $value = filter_markup($value, $form[$field_name]['filter']);
      //}
      //else {
      //  // Always assumed to be "plain" if no filter is set.
      //  $value = filter_markup($value, "plain");
      //}
      /////////////////
      
      
      // If this is a datetime-local field, then the value needs to be adjusted for it to work correctly.
      if ($form[$field_name]['type'] == 'datetime-local') {
        if (trim($value) != '') {
          $value = date('Y-m-d\TH:i', strtotime($value));
        }
      }      
      
      
      $form[$field_name]["value"] = $value;
      
    }    
  }


  // Are we published?
  $form['published'] = array(
    'type' => 'checkbox',
    'label' => t('Published'),
    'value' => (bool) $content->published,
    'weight' => 900,
  );
  
  
  // Draw the controls (buttons)
  
  $form["submit_submit"] = array(
    "type" => "submit",
    "value" => t("Submit"),
    'weight' => 920,            
  );
  
  if ($cid != 'new') { 
    $form["submit_delete"] = array(
      "type" => "submit",
      "value" => t("Delete"),    
      "confirm" => t('Are you sure you wish to delete this?\nThis action cannot be undone.'),
      'weight' => 930,    
    );
  }


  
  return $form;
}



/**
 * Submit handler for the edit content form.
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function content_edit_content_form_submit(&$form, $form_state) {
  global $user;
  
  $values = $form_state["values"];

  $now = time();
  
  $types = content_get_types();
  $type = $values["type"];  
  
  // Does the user have permission to edit this content?
  if (!user_has_permission("edit_$type" . "_content")) {  
    fp_add_message(t("Sorry, you do not have permission to edit that content type."));
    fp_goto("admin/config/content");
    return;
  }  
  
  // Assemble into a content object, then call content_save();
  if ($values['cid'] == 'new') {
    // This is a NEW content obj!
    $content = new stdClass();
    $content->type = $type;
    $content->cid = "new";    
    $content->published = 1;
  }
  else {
    // This is an EXISTING content.  Load it.
    $content = content_load($values['cid']);
  }
  
  $content->title = $values['title'];  // required
  
  // set published status.  0 for not, 1 for published
  $content->published = (bool) $values['published'];
  
  // Add in our new field values.  
  foreach ($types[$type]['fields'] as $fieldname => $details) {
    $content->{'field__' . $fieldname} = @$values[$fieldname];
  }
  
  content_save($content);
  
  fp_add_message(t('Saved successfully.'));
  
    
  
} // ... submit





/**
 * Save the content to the database.
 *
 * @param unknown_type $cid
 */
function content_save(&$content) {

  // Remove from our globals cache
  if ($content->cid != 'new') {
    unset($GLOBALS['content_cache'][$content->cid]);
  }

  $modules = modules_implement_hook("content_save");
  foreach ($modules as $module) {
    call_user_func_array($module . "_content_save", array(&$content));    
  }

  // Save to globals cache
  $GLOBALS['content_cache'][$content->cid] = $content;

}


/**
 * Implements hook_content_save.  We will save the content object to the database.
 */
function content_content_save(&$content) {
  global $user;
  
  $types = content_get_types();
  $type = $content->type;
    
  // If this is a NEW content, then insert once into content table to get cid.  Then, insert into content_versions to get vid.  Then update content table with vid.
  if ($content->cid == 'new') {
    db_query('INSERT INTO content (user_id, `type`, title, posted, updated, published)
              VALUES (?, ?, ?, ?, ?, ?)', array($user->id, $type, $content->title, time(), time(), $content->published));
    $content->cid = db_insert_id();
    
    // insert into content_versions to get the vid.
    db_query("INSERT INTO content_versions (cid) VALUES (?)", array($content->cid));
    $content->vid = db_insert_id();
    
  }
  else {
    // If this is an EXISTING content, then insert once into content_versions to get new vid.  Update title and vid in content table.
    
    // insert into content_versions to get the vid.
    db_query("INSERT INTO content_versions (cid) VALUES (?)", array($content->cid));
    $content->vid = db_insert_id();
  }
  

  // Now we should have a fully created $content object.  Let's update the title and other values in the content table.
  db_query("UPDATE content SET vid = ?, title = ?, updated = ?, user_id = ?, published = ? WHERE
            cid = ?", array($content->vid, $content->title, time(), $user->id, $content->published, $content->cid));

  
  // Now we are going to insert all of the field values.  We assume there is a table ALREADY CREATED with our field names
  // as field__the_name.
    
  // Insert new row into content__$type table, including all the extra fields and such.  It should
  //        look like  cid | vid | field__name | field__name | and so on.
  //   

  // Add in our new field values.
  $params = array();  
  $all_fields = array();
  $param_names = array();
  
  $all_fields[] = 'cid';
  $all_fields[] = 'vid';
  
  $param_names[] = ':cid';
  $param_names[] = ':vid';
  
  $params[':cid'] = $content->cid;
  $params[':vid'] = $content->vid;
  
  foreach ($types[$type]['fields'] as $fieldname => $details) {
    $db_field_name = "field__$fieldname";  
    $all_fields[] = $db_field_name;
    $param_names[] = ":$db_field_name";
        
    $params[":field__$fieldname"] = $content->{$db_field_name};
    
  }  

  $sql = "INSERT INTO content__$type
              (" . join(", " , $all_fields) . ")
              VALUES (" . join(", " , $param_names) . ")";
    
  db_query($sql, $params);    
  
    
  
} // content_content_save







/**
 * Load the content from the database and return an array, by calling hook_content_load.
 *
 * @param unknown_type $cid
 */
function content_load($cid, $reset = FALSE) {
  if (!$cid) return null;
    
  if ($reset) {
    unset($GLOBALS['content_cache'][$cid]);
  }  

  if (isset($GLOBALS['content_cache'][$cid])) {
    return $GLOBALS['content_cache'][$cid];
  }

    
  $content = new stdClass();
  $content->cid = $cid;
  $modules = modules_implement_hook("content_load");
  foreach ($modules as $module) {
    call_user_func_array($module . "_content_load", array(&$content));    
  }
  
  
  // Add to our globals cache
  $GLOBALS['content_cache'][$cid] = $content;
  
  return $content;
}




/**
 * Implementation of content's hook_content_load
 * 
 * We simply wish to load from our db table.  The cid is in
 * $content->cid.
 *
 * @param unknown_type $content
 */
function content_content_load(&$content) {
  
  $res = db_query("SELECT * FROM content WHERE cid = ? ", array( $content->cid));
  $content = db_fetch_object($res);

  // Populate our field values in the content object
  
  $res = db_query("SELECT * FROM content__$content->type WHERE vid = ?", array($content->vid));
  $fieldvals = db_fetch_array($res);

  $types = content_get_types();  
  foreach ($types[$content->type]['fields'] as $fieldname => $details) {
    $val = @$fieldvals['field__' . $fieldname];
    $content->{'field__' . $fieldname} = array('value' => $val, 'field' => $details);
                
                
    $display_value = $val;
      
    // Figure out the "display_value" for this field.
      
    if (isset($details['filter']) && $details['filter'] != 'plain') {
      $display_value = filter_markup(trim($display_value), $details['filter']);
    }
    else {
      // Always assumed to be "plain" if no filter is set.
      $display_value = filter_markup($display_value, "plain");
      // Need to add in line breaks if this was plain.
      $display_value = nl2br(trim($display_value));
    }
      
    // If this is a datetime-local field, then the value needs to be adjusted for it to work correctly.
    if ($details['type'] == 'datetime-local') {
      if (trim($display_value) != '') {
        //$value = date('Y-m-d\TH:i', strtotime($value));
        $format = 'standard';
        if (isset($details['format_date'])) {
          $format = $details['format_date'];
        }
        $display_value = format_date(strtotime($display_value), $format);
      }
    }      
      
    // if this is a select list, we want to display the option label this value went with.
    if ($details['type'] == 'select') {
      $temp = @$details['options'][$val];
      if ($temp != "") $display_value = $temp;
    }
      
    $content->{'field__' . $fieldname}['display_value'] = $display_value;  
    
  } // foreach  
    
  
     
}




/**
 * Sample hook for hook_content_load
 * 
 * This hook lets modules act on content as it is being loaded.  Notice
 * the content is being passed by reference, so whatever changes you make
 * to this array will be added in.  Nothing needs to be returned.
 *
 * @param unknown_type $content
 */
function hook_content_load(&$content) {
  $content["new_field"] = "something something";
}



function content_handle_delete_content() {
  $aid = $_REQUEST["aid"];
  db_query("UPDATE content SET delete_flag = '1'
            WHERE aid = '?' ", $aid);
  
  fp_add_message(t("Content successfully deleted."));
  fp_goto("admin/config/content");
}




/**
 * Display a list of content for the administrator
 */
function content_display_content_admin_list() {
  $rtn = "";
  
  //fp_add_css(fp_get_module_path("content") . "/css/content.css");
  

  $rtn .= "<br><b>" .t("Create new content:") . "</b>
            <table border='1' width='100%' cellpadding='4'>";
  // Go through all available content types and provide a link.
  $types = content_get_types();
  // We expect types to be returned like this:
  // ["page"]["title"] = "Basic Page";
  // ["page"]["description"] = "This is a standard page.";
  foreach ($types as $type => $details) {
    if (user_has_permission("edit_$type" . "_content")) {
      $rtn .= "<tr>
                <td>" . l($details["title"], "content/add/$type") . "</td>
                <td>" . $details["description"] . "</td></tr>";
    }
  }

  
  
  $rtn .= "</table>
          
          <hr>";
  
  // Show a table of current content in the system.
  $rtn .= "<b>" . t("Existing content:") . "</b>";
  @$filter = $_GET["filter"];
  
  $rtn .= "<form action='" . fp_url("admin/config/content") . "' method='GET'>
              " . t("Display type:") . " &nbsp; <select name='filter'>
                  <option value=''>" . t(" -- Any --") . "</option>";
  foreach ($types as $type => $details) {
    $sel = ($type == $filter) ? "selected" : "";
    $rtn .= "<option value='$type' $sel>" . $details["title"] . "</option>";
  }
  $rtn .= "</select><input type='submit' value='-&gt;'> </form>";
          
  
  
  $rtn .= "<table width='100%' border='1' class='tenpt'>
            <tr>
              <th>" . t("Title") . "</th>
              <th>" . t("Edit") . "</th>
              <th>" . t("Type") . "</th>
              <th>" . t("Author") . "</th>
              <th>" . t("Updated") . "</th>
            </tr>";
  if ($filter != "") {
    $res = db_query("SELECT * FROM content WHERE type = '?' ORDER BY title", $filter);
  }
  else {
    $res = db_query("SELECT * FROM content ORDER BY title");
  }
  
  while ($cur = db_fetch_array($res)) {
    
    $author = fp_load_user($cur["user_id"]);
    $author_name = "";
    if ($author && isset($author->name)) {
      $author_name = $author->name;
    }
    
    $updated = format_date($cur["updated"]);
    
    //$rtn .= "<tr><td valign='top'>" . l($cur["title"], "content/{$cur["cid"]}") . "</td>";
    $rtn .= "<tr><td valign='top'>" . $cur["title"] . "</td>";
    
    if (user_has_permission("edit_{$cur["type"]}" . "_content")) {
      $rtn .= "
                <td valign='top'>" . l(t("edit"), "content/{$cur["cid"]}/edit") . "</td>";
    }
    else {
      $rtn .= "<td>&nbsp;</td>";
    }
    
    $rtn .= "
                <td valign='top'>" . $cur["type"] . "</td>
                <td valign='top'>" . $author_name . "</td>
                <td valign='top'>" . $updated . "</td>
             </tr>";
  }
  
  $rtn .= "</table>";
   
    
  return $rtn;
}


/**
 * Return an array with all the possible content types known to FlightPath
 * 
 * Modules may declare their content types using the hook_content_register_content_type hook.
 * You should clear the cache after creating a new content type.
 *
 */
function content_get_types() {
  $rtn = array();
  
  $modules = modules_implement_hook("content_register_content_type");
  foreach($modules as $module) {
    $types = call_user_func($module . '_content_register_content_type');  
    $rtn += $types;
  }
  
  return $rtn;
  
}


/**
 * Implementation of this module's hook_content_register_content_type.
 * 
 * I mainly just want to register the "page" content type, for a basic
 * web page set up.
 *
 */
function content_content_register_content_type() {
  return array(
    "page" => array(
      "title" => t("Page"),
      "description" => t("This is a basic web page."),     
    ),
  );
}



/**
 * Sample hook other modules implement to register a content type.
 * 
 * Simply return an array as illustrated below to register your
 * module's content types.
 * 
 * IMPORTNAT:  The type's machine name must be a valid variable name.
 * No spaces or strange symbols.
 *
 */
function hook_content_register_content_type() {
  $arr = array(
    "type_1" => array(
      "title" => t("Type One"),
      "description" => t("This is a content type."),
      "settings" => array(),
    ),
    "type_2" => array(
      "title" => t("Type Two"),
      "description" => t("This is another content type."),
      "settings" => array(),
    ),
    
  );
  
  return $arr;
}



/**
 * Return the HTML rendering the content we have in the database.
 */
function content_render_content($bool_show_delete = FALSE) {
  $rtn = "";
  
  $res = db_query("SELECT * FROM content WHERE delete_flag = 0
                    ORDER BY posted DESC");
  while ($cur = db_fetch_array($res)) {
    $rtn .= "<div class='content'>
                <div class='content-text'>" . filter_markup($cur["content"], "full") . "</div>
                <div class='content-posted'>" . t("Posted") . " " . date("D, M jS Y - g:ia", $cur["posted"]) . "</div>";
    if ($bool_show_delete) {
      $delete_link = "";
      $delete_link = fp_get_js_confirm_link(t("Are you sure you wish to delete this content?"), 'window.location="' . fp_url("content/delete", "aid=" . $cur["aid"]) . '"', t("Delete?"));
      $rtn .= "<div class='content-delete'>$delete_link</div>";  
    }
    
    $rtn .= "</div>";
  }                    
  
  return $rtn;
}


/**
 * Implementation of hook_perm
 * 
 * We want to create a permission for every content type.
 *
 */
function content_perm() {
  $rtn = array();  

  
  $rtn["admin_content"] = array(
    "title" => t("Administer Content"),
    "description" => t("The user needs this permission to access the content page at all, in
                      addition to specific permissions listed below for editing
                      different content types."),
  );
  
  $types = content_get_types();
  foreach ($types as $type => $details) {  
    $rtn ["edit_$type" . "_content"] = array(
      "title" => t("Edit") . " " . $details["title"] . " " . t("content"),      
    );
  }
  
  return $rtn;
}



/**
 * hook_blocks.  Returns an array of available blocks offered by this module in this format:
 * array(
 *  delta => "This is the title of the block.",
 *  ),
 * );
 * 
 * Delta can be just about anything machine-readable.  Alphanumeric and underscores only.
 * Ex: 0, 1, fun_2, etc.
 * 
 */
function content_blocks() {
  return array(
    "primary" => t("Primary content block"),
  );
}

/**
 * Called when it is time to render the block in question.
 * Expected to return an array which looks like this:
 * array(
 *  "title" => "Some title goes here.",
 *  "body" => "this is the primary body of the block",
 * );
 */
function content_render_block($delta) {
  
  $rtn = array();
  
  if ($delta == "primary") {
      
    fp_add_css(fp_get_module_path("content") . "/css/content.css");
    
    $rtn["title"] = t("content");       
    $rtn["body"] = content_render_content();
  }
  
  
  return $rtn;
  
}
