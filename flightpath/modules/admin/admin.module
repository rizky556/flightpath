<?php

/*
* The admin module for FlightPath.  Lets admins configure modules, users, etc, as well
* as all of the degree plan and course data within FlightPath.
*/
 
function admin_menu() {
  $items = array();
   
  $items["admin-tools/admin"] = array(
     "title" => "FlightPath Admin Console",
     "page_callback" => "admin_display_main",
     "access_arguments" => array("can_access_admin"),
     "tab_family" => "admin",
     "page_settings" => array(
       "page_has_search" => FALSE,
       "page_banner_is_link" => TRUE,
       "page_hide_report_error" => TRUE,
       "target" => "_blank",        
     ),     
     "type" => MENU_TYPE_TAB,
  );
  
  $items["admin/config/urgent-message"] = array(
    "title" => "Edit urgent message",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_urgent_message_form", "system_settings"),
    "access_arguments" => array("can_edit_urgent_message"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin-tools/admin",    
  );     

  
  $items["admin/config/user-rolls"] = array(
    "title" => "Manage user rolls",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_user_rolls_form"),
    "access_arguments" => array("can_edit_user_rolls"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin-tools/admin",    
  );     
  

  $items["admin/config/permissions"] = array(
    "title" => "Manage permissions",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_permissions_form"),
    "access_arguments" => array("can_edit_permissions"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin-tools/admin",    
  );     
  
  
  
  
  $items["admin/edit-advising-settings"] = array(
    "title" => "Edit advising settings",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_advising_settings_form", "system_settings"),
    "access_arguments" => array("can_edit_advising_settings"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin-tools/admin",    
  );     
  
     
  $items["admin/apply-draft-changes"] = array(
    "title" => "Apply draft changes",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_apply_draft_changes_form"),
    "access_arguments" => array("can_apply_draft_changes"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin-tools/admin",      
  );
   
   ///////////////////////////////////////////////////////
  ////////////////////// Degree Editing /////////////////// 
   
  $items["admin/degrees"] = array(
    "title" => "Degrees",
    "page_callback" => "admin_display_degrees",
    "access_arguments" => array("can_access_data_entry"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "file" => menu_get_module_path("admin") . "/admin.degrees.inc",
    "type" => MENU_TYPE_TAB,
    "tab_family" => "admin_degrees",
  );
   
  $items["admin/degrees/edit-degree"] = array(
    "title" => "Edit Degree",
    "page_callback" => "admin_display_edit_degree",
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Back to Degrees list",
          "path" => "admin/degrees",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),   
    "file" => menu_get_module_path("admin") . "/admin.degrees.inc",
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin/degrees",
  );   
   
  $items["admin/degrees/handle-edit-degree-submit"] = array(    
    "page_callback" => "admin_handle_edit_degree_submit",
    "access_arguments" => array("can_edit_data_entry"),
    "file" => menu_get_module_path("admin") . "/admin.degrees.inc",
    "type" => MENU_TYPE_CALLBACK,
  );      
   

  $items["admin/degrees/popup-add-group"] = array(
    "title" => "Add Group",
    "page_callback" => "admin_display_degrees_popup_add_group",
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),   
    "file" => menu_get_module_path("admin") . "/admin.degrees.inc",
    "type" => MENU_TYPE_CALLBACK,
  );     

  
  $items["admin/degrees/add-degree"] = array(
    "title" => "Add Degree",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_add_degree_form"),
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Back to Degrees list",
          "path" => "admin/degrees",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),   
    "file" => menu_get_module_path("admin") . "/admin.degrees.inc",
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin/degrees",    
  );     
  
  $items["admin/degrees/copy-degree"] = array(
    "title" => "Copy Degree",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_copy_degree_form"),
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Back to Degrees list",
          "path" => "admin/degrees",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),   
    "file" => menu_get_module_path("admin") . "/admin.degrees.inc",
    "type" => MENU_TYPE_CALLBACK,
    "tab_parent" => "admin/degrees",
  );     
  


   ///////////////////////////////////////////////////////
  ////////////////////// Group Editing /////////////////// 
   
  $items["admin/groups"] = array(
    "title" => "Groups",
    "page_callback" => "admin_display_groups",
    "access_arguments" => array("can_access_data_entry"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "file" => menu_get_module_path("admin") . "/admin.groups.inc",
    "type" => MENU_TYPE_TAB,
    "tab_family" => "admin_groups",
  );

  $items["admin/groups/edit-group"] = array(
    "title" => "Edit Group",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_edit_group_form"),
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Back to Groups list",
          "path" => "admin/groups",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),   
    "file" => menu_get_module_path("admin") . "/admin.groups.inc",
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin/groups",
  );     
     
     
  $items["admin/groups/popup-select-icon"] = array(
    "title" => "Select Icon",
    "page_callback" => "admin_display_groups_popup_select_icon",
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),   
    "file" => menu_get_module_path("admin") . "/admin.groups.inc",
    "type" => MENU_TYPE_CALLBACK,
  );     
     
  $items["admin/groups/popup-edit-definition"] = array(
    "title" => "Edit Definition",
    "page_callback" => "admin_display_groups_popup_edit_definition",
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),   
    "file" => menu_get_module_path("admin") . "/admin.groups.inc",
    "type" => MENU_TYPE_CALLBACK,
  );     

  $items["admin/groups/popup-show-group-use"] = array(
    "title" => "Group Use",
    "page_callback" => "admin_display_groups_popup_show_group_use",
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),   
    "file" => menu_get_module_path("admin") . "/admin.groups.inc",
    "type" => MENU_TYPE_CALLBACK,
  );     

  $items["admin/groups/process-all-definitions"] = array(
    "title" => "Process all Definitions",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_process_all_definitions_form"),
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Back to Groups list",
          "path" => "admin/groups",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),   
    "file" => menu_get_module_path("admin") . "/admin.groups.inc",
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin/groups",
  );     
          
     
  /////////////////////////////////////////////////
  /////////////////// Courses editing ////////////////
  $items["admin/courses"] = array(
    "title" => "Courses",
    "page_callback" => "admin_display_courses",
    "access_arguments" => array("can_access_data_entry"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "file" => menu_get_module_path("admin") . "/admin.courses.inc",
    "type" => MENU_TYPE_TAB,
    "tab_family" => "admin_courses",
  );  
     
  $items["admin/courses/edit-course"] = array(
    "title" => "Edit Course",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_edit_course_form"),
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Back to Courses list",
          "path" => "admin/courses",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),   
    "file" => menu_get_module_path("admin") . "/admin.courses.inc",
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin/courses",
  );     
          
     
     
  return $items;
}




/**
 * This form allows the user to manage the rolls in the system.
 */
function admin_user_rolls_form() {
  $form = array();
  
  fp_add_css(fp_get_module_path("admin") . "/css/admin.css");
  fp_add_js(fp_get_module_path("admin") . "/js/admin.js");
  
  
  
  $form["mark" . $m++] = array(
    "type" => "markup",
    "value" => t("Rolls are able to be assigned permissions in FlightPath, and then users are assigned
                those rolls.  You may not remove the two rolls, 'anonymous user' and 'authenticated user'.
                Those are assigned automatically when the user logs in or out.
                However, you may add as many more rolls as you wish.")
                . "<br><br><b>" . t("Rolls:") . "</b>
                <table style='padding-left: 20px;'>
                  <tr><td>" . t("anonymous user") . "</td><td></td></tr>
                  <tr><td>" . t("authenticated user") . "</td><td></td></tr>",
  );

  $rolls = variable_get("rolls", array());   
  foreach ($rolls as $key => $value) {
    $form["mark" . $m++] = array(
      "type" => "markup",
      "value" => "<tr><td>$value</td><td>" . fp_get_js_prompt_link("Enter a new name to change this roll to:", $value, "document.getElementById(\"element-perform_action2\").value=\"edit~_~$key~_~\" + response; document.getElementById(\"sysform\").submit(); ", t("edit")) . " | 
                  " . fp_get_js_confirm_link(t("Are you sure you wish to delete this roll?\\nIt will be removed from users' accounts.  This action cannot be undone.\\n\\nProceed?"), "document.getElementById(\"element-perform_action2\").value=\"del~_~$key\"; document.getElementById(\"sysform\").submit(); ", t("delete")) . "</td></tr>", 
    );
  }
  
  $form["mark" . $m++] = array(
    "type" => "markup",
    "value" => "</table>",
  );
  
  $form["perform_action2"] = array(
    "type" => "hidden",
  );
  
  $form["new_roll"] = array(
    "type" => "textfield",
    "label" => t("Add a new roll:"),    
  );
  
  $form["submit"] = array(
    "type" => "submit",
    "value" => t("Add new"),
  );  
  
  return $form;
}


function admin_user_rolls_form_submit($form, $form_state) {
  $values = $form_state["values"];
  
  if (trim($values["new_roll"]) != "") {
    $new_roll = strtolower(trim($values["new_roll"]));
    
    // Clean up any trouble chars
    $new_roll = preg_replace("/[^a-zA-Z0-9_]/", " ", $new_roll);
        
    // Get the old rolls, add it in, then re-save.
    $rolls = variable_get("rolls", array());
    
    $i = 2; // start with this index.
    // Find the highest index so far.
    foreach($rolls as $key => $value) {
      if ($key >= $i) $i = $key + 1;
    }
    // Okay, we have the highest key.  Let's insert and save!
    $rolls[$i] = $new_roll;
     
    variable_set("rolls", $rolls);
    fp_add_message("The new roll has been added successfully.");       
  }
  
  
  if (strstr($values["perform_action2"], "del~_~")) {
    $temp = explode("~_~", $values["perform_action2"]);
    $i = trim($temp[1]);
    // Okay, let's load the roll, then remove it, then re-save.
    $rolls = variable_get("rolls", array());
    unset($rolls[$i]);
    variable_set("rolls", $rolls);
    // TODO:  Re-save all users who may have had this roll assigned!
    // TODO: Something with permissions to remove this roll from that too.
    
    fp_add_message("The roll has been deleted successfully.");    
            
  }
  
  
  if (strstr($values["perform_action2"], "edit~_~")) {
    $temp = explode("~_~", $values["perform_action2"]);
    $i = trim($temp[1]);
    $new_name = strtolower(trim($temp[2]));
    $new_name = preg_replace("/[^a-zA-Z0-9_]/", " ", $new_name);    
    if (trim($new_name) != "") {  
      // Okay, let's load the roll, then remove it, then re-save.
      $rolls = variable_get("rolls", array());
      $rolls[$i] = $new_name;
      variable_set("rolls", $rolls);
      fp_add_message("The roll has been edited successfully.");    
    }
    
  }

   
  
}



/**
 * This is a systems settings form, which lets
 * the user edit advising variabled for FlightPath.
 */
function admin_advising_settings_form() {
  $form = array();
  
  $settings = fp_get_system_settings();
  
  $mark = "";
  // TODO: This needs to become genericized!  If it can't be, it should just be taken out.
  
  $sems = array(40,41, 60,81,82);
  for($t = $settings["current_catalog_year"]; $t <= $settings["current_catalog_year"] + 2; $t++) {
    $mark .= "<div style='padding-left: 15px;'>";
    foreach($sems as $sm) {
      $try_year = $t . $sm;
      $course = new Course();
      $course->term_id = $try_year;
      $mark .= "" . $course->get_term_description(true) . ": <b>$course->term_id</b>, &nbsp; &nbsp; &nbsp;";
    }
    $mark .= "</div>";
  }  
  
    
  $form["mark" . $m++] = array(
    "type" => "markup",
    "value" => t("Term ID Quick Reference:") . $mark,
  );
  
  $form["available_advising_term_ids"] = array(
    "type" => "textfield",
    "label" => t("Available advising term ids"),
    "value" => variable_get("available_advising_term_ids", ""),
    "description" => t("Separate by commas. Ex: 200940, 200941, 200960. Make sure to enter
                        in the order that they should appear in FlightPath."),
  );  

  $form["advising_term_id"] = array(
    "type" => "textfield",
    "label" => t("Default advising term id"),
    "value" => variable_get("advising_term_id", ""),
    "description" => t("Of the available term ids above, this is the default that FlightPath
                        is set to when an advisor logs in. Ex: 200940."),
  );  


  $form["current_catalog_year"] = array(
    "type" => "textfield",
    "size" => 10,
    "label" => t("Current catalog year"),
    "value" => variable_get("current_catalog_year", ""),
    "description" => t("This is the year which What If loads degrees from, as well as other important functions.
                        Only change this once you have fully loaded a new catalog year."),
  );  

  $form["current_draft_catalog_year"] = array(
    "type" => "textfield",
    "size" => 10,
    "label" => t("Current DRAFT catalog year"),
    "value" => variable_get("current_draft_catalog_year", ""),
    "description" => t("While in Draft mode, this is the year which What If loads degrees from.
                        You may change this while working on a new catalog.  It will not affect any other
                        users of the system.  While not working on a new catalog, set this
                        to the same as the Current catalog year."),
  );  



    
  
  return $form;
}




/**
 * Convienence function to get semester's default regular name.
 */
function admin_get_semester_name($semester_num) {    
  
  $ar = array(t("Freshman Year"), t("Sophomore Year"), t("Junior Year"), t("Senior Year"));
  $s = $ar[$semester_num];
  if ($s == "")
  {
    $s = t("Year") . " " . ($semester_num + 1);
  }
  return $s;
}



/**
 * This form lets the user apply draft changes (if they can supply the passcode)
 */
function admin_apply_draft_changes_form() {
  $form = array();
  
  $form["mark" . $m++] = array(
    "type" => "markup",
    "value" => t("You can use this form to apply your draft changes to the production database, making changes
                  to degrees, courses, and groups visible to all users of the system."),
  );
  
  $form["passcode"] = array(
    "type" => "password",
    "label" => t("For added security, you must enter the transfer passcode:"),
    "required" => TRUE,
    "description" => t("This is a passcode set up in FlightPath's settings, to provide an extra layer
                        of security for this powerful action."),
        
  );
  
  $form["submit"] = array(
    "type" => "submit",
    "value" => t("Submit"),
    "description" => t("This action may take several minutes to complete!  Click only ONCE!"),
    "prefix" => "<hr>",
  );
  
  
    
  return $form;
}


/**
 * Handles the actual moving of draft courses into production.
 */
function admin_apply_draft_changes_form_submit($form, $form_submit) {
  $values = $form_submit["values"];
  
  $db = get_global_database_handler();
  $de_catalog_year = admin_get_de_catalog_year();
  
  // Check to make sure they entered the transfer passcode correctly.
    
  if ($values["passcode"] != variable_get("admin_transfer_passcode", "changeME")) {

    form_error("passcode", t("Error!  The passcode you entered is not correct.  Check with the FlightPath administrator
                              (or check the admin settings pages) to learn the passcode."));
    return;
    
  }
   

  // Save the entire post to the log.
  //$post_x_m_l = fp_array_to_xml("post",$_POST, true);
  //$db->add_to_log("admin_perform_apply_draft_changes","begin",$post_x_m_l);


  // First, set maintenance mode...
  $db->set_maintenance_mode("1");

  // Okay, so what we gotta do is truncate the production tables,
  // then copy the draft tables in.
  $table_array = array(
    "courses",
    "degree_requirements",
    "degree_tracks",
    "degrees",
    "group_requirements",
    "groups",
  );

  foreach($table_array as $table_name) {
    $draft_table_name = "draft_$table_name";
    //$db->add_to_log("admin_perform_apply_draft_changes","$table_name,$draft_table_name");
    // First, truncate existing...
    $query = "truncate table $table_name";
    $res = db_query($query);
    // Now, copy in draft changes...
    $query = "INSERT INTO $table_name
            SELECT * FROM $draft_table_name ";
    $res = db_query($query);
  }

  $db2 = new DatabaseHandler();
  // Now, we need to go through the draft_instructions table,
  // and perform each instruction one at a time.
  $res = db_query("SELECT * FROM draft_instructions
            ORDER BY `id` ");
  while($cur = db_fetch_array($res))
  {
    $instruction = trim($cur["instruction"]);
    //$db2->add_to_log("admin_perform_apply_draft_changes",$instruction);

    $temp = explode(",",$instruction);

    if (trim($temp[0]) == "update_course_id") {
      $db2->update_course_id(trim($temp[1]), trim($temp[2]));
    }

    if (trim($temp[0]) == "update_course_requirement_from_name") {
      $db2->update_course_requirement_from_name(trim($temp[1]), trim($temp[2]), trim($temp[3]));
    }
  }

  // Once this is done, truncate the draft_instructions table.
  $res = db_query("TRUNCATE TABLE draft_instructions");


  // And we are done!  Set maintenance mode back to 0.
  $db->set_maintenance_mode("0");
  //$db->add_to_log("admin_perform_apply_draft_changes","finished");

  // Send emails to notify programmers...
  $notify = variable_get("notify_apply_draft_changes_email_address", "");  
  if ($notify != "") {
    mail($notify, "FlightPath Apply Draft Changes", "Someone has applied draft changes to FlightPath, which updated degree plans, groups, and courses.");
  }
  
  fp_add_message(t("Successfully updated the production database with draft changes.  Your changes are now live and visible on production for all users."));
 
  
}




/**
 * Get the "de_catalog_year" from the REQUEST.
 * If it's not there or invalid, pull it from our system settings.
 */
function admin_get_de_catalog_year() {
  $settings = fp_get_system_settings();
  $de_catalog_year = $_REQUEST["de_catalog_year"];
  if (!$de_catalog_year || $de_catalog_year < $settings["earliest_catalog_year"]) {
    $de_catalog_year = $settings["earliest_catalog_year"];
  }
  return $de_catalog_year;  
}


/**
 * This is an implementation of hook_menu_handle_replacement_pattern.
 * It will search for and replace replacement patterns which we are aware of it in $str.
 */
function admin_menu_handle_replacement_pattern($str) {
  
  if (strpos($str, "%DE_CATALOG_YEAR%") !== 0) {
    // It contains this replacement pattern!
    $str = str_replace("%DE_CATALOG_YEAR%", admin_get_de_catalog_year(), $str);
  }
  
  return $str;
}


function admin_perm() {
  return array(
    "can_access_admin" => array(
      "title" => t("Access administrative console"),
      "description" => t("This is a powerful permission!  This allows a 
                          user to access the 'admin console' for FlightPath."),
    ),
    "can_edit_urgent_message" => array(
      "title" => t("Edit urgent message"),
      "description" => t("The user may edit the 'Urgent Message' which appears at the top of every page, if set."),
    ),    
    "can_access_data_entry" => array(
      "title" => t("Access Data Entry"),
      "description" => t("The user can access (view) the data-entry portion of the admin console. Degree plans, groups, and courses."),
    ),
    "can_edit_data_entry" => array(
      "title" => t("Edit Data Entry"),
      "description" => t("This is a powerful permission! The user can edit degree plans, groups, and courses."),
    ),
    "can_view_advanced" => array(
      "title" => t("View advanced"),
      "description" => t("The user may see advanced information on-screen, for example, internal ID numbers for degrees and courses."),
    ),   
    "can_apply_draft_changes" => array(
      "title" => t("Apply draft changes"),
      "description" => t("The user may move draft changes into production."),
    ),   
    "can_edit_advising_settings" => array(
      "title" => t("Edit advising settings"),
      "description" => t("The user may edit advising settings, like available term IDs and the current catalog year."),
    ),   
    "can_edit_user_rolls" => array(
      "title" => t("Edit user rolls"),
      "description" => t("The user may add/edit/delete user rolls in the system."),
    ),   
    "can_edit_permissions" => array(
      "title" => t("Edit permissions"),
      "description" => t("The user may assign permissions to different rolls in the system."),
    ),   
    
            
  );
} 
 

/**
 * This is the permissions form, where users can set which rolls have which permissions.
 */
function admin_permissions_form() {
  $form = array();

  fp_add_css(fp_get_module_path("admin") . "/css/admin.css");
  
  
  // Let's get all of our permissions from the permissions table.
  $permissions = array();
  $res = db_query("SELECT * FROM roll_permissions");
  while ($cur = db_fetch_array($res)) {
    $permissions[$cur["rid"]][] = $cur["perm"];
  }
    
  $cb = $m = 1;
  
  $form["mark" . $m++] = array(
    
    "value" => t("Use this form to assign permissions to rolls in the system.
                  These permissions are defined by module."),
  );

  $rolls = variable_get("rolls", array());
  $rolls[0] = t("anonymous user");
  $rolls[1] = t("authenticated user");
  ksort($rolls);

  $col_count = count($rolls) + 1;
  
  $form["mark" . $m++] = array(
    "value" => "<table class='admin-perm-table' width='100%' cellpadding='0' cellspacing='0'>
                <tr><th>Permission</th>",
  );   
  
  foreach ($rolls as $key => $roll) {
    $form["mark" . $m++] = array(
      "value" => "<th>" . $roll . "</th>",
    );   
    
  }  

  $form["mark" . $m++] = array(
    "value" => "</tr>",
  );   

    
  // Go through all of the modules, then call hook_perm for them, to get their permissions.
  $modules = modules_implement_hook("perm");
  //fpm($modules);
  foreach ($modules as $module) {
    $form["mark" . $m++] = array(
      "value" => "<tr><td colspan='$col_count' class='perm-module-name'>" . ucwords($module) . " " . t("module") . "</td></tr>",
    );   
    
    $zebra = "even";
    
    // Let's get all the perms.
    $perms = call_user_func($module . "_perm");    
    foreach ($perms as $perm_name => $perm_details) {
      $title = $perm_details["title"];
      $desc = $perm_details["description"];

      $zebra = ($zebra == "even") ? "odd" : "even";

      $form["mark" . $m++] = array(
        "value" => "<tr class='perm-cb-row perm-cb-row-$zebra'><td class='perm-details' valign='top'>
                      <div class='perm-title'>$title</div>
                      <div class='perm-name'>$perm_name</div>
                      <div class='perm-desc'>$desc</div>
                   </td>",
      );   

      foreach ($rolls as $key => $roll) {
        
        // Should this be checked by default (cause it was all ready in our table?)
        $default_value = array();
        if (is_array($permissions[$key]) && in_array($perm_name, $permissions[$key])) {
          // Yes, it was in there!  Set up the default_value as an array that
          // looks like array(key => key).  That is how we set a checkbox to be checked
          // by default.
          $default_value = array($key . "___$perm_name" => $key . "___$perm_name");          
        }
        
        $form["perm_cb_" . $cb++] = array(
          "type" => "checkboxes",
          "options" => array("$key" . "___$perm_name" => ""),
          "value" => $default_value,
          "prefix" => "<td class='perm-cb'>",
          "suffix" => "</td>",          
        );   
        
      }
     
      
      
      $form["mark" . $m++] = array(
        "value" => "</tr>",
      );   
            
           
      
    }
    
  }
  
    
  
  $form["mark" . $m++] = array(
    "value" => "</table>",
  );   
    
    
  $form["submit"] = array(
    "type" => "submit",
    "value" => t("Save permissions"),
    "prefix" => "<hr>",
  );
    
  return $form;
}
 
 
 
/**
 * Submit handler for the permissions form.
 */
function admin_permissions_form_submit($form, $form_submit) {
  $values = $form_submit["values"];
  
  // We should begin by truncating our permissions table, then re-inserting
  // everything we get from this submission.
  db_query("TRUNCATE TABLE roll_permissions");
  
  // Find all the perm checkboxes.  
  foreach($values as $key => $val) {
    if (strstr($key, "perm_cb_")) {
      $cb = current($val);
      if (strstr($cb, "___")) {
        $temp = explode("___", $cb);
        $rid = $temp[0];
        $perm = $temp[1];
        
        // Okay, save this to our table.
        db_query("INSERT INTO roll_permissions (rid, perm)
                  VALUES ('?', '?') ", $rid, $perm);      
      }
    }
  }
  
  fp_add_message(t("Permissions saved successfully."));
  
} 
 
 
 
/**
 * Meant to be fed into "fp_system_settings_form()", this function
 * returns an array which will automatically save values to our "variables" table. 
 */
function admin_urgent_message_form() {
  $form = array();

  
  $form["mark" . $m++] = array(
    "type" => "markup",
    "value" => "<p>" . t("Any message you enter here will be displayed at the top of every page in the system. 
                  This is used to alert users that the system is about to be taken offline, or any other urgently-needed information.") . "</p>
                  <p>" . t("To delete this message, simple delete all the text in the box and save.") . "</p>",
  );
  
  $form["urgent_msg"] = array(
    "type" => "textarea",
    "label" => "Urgent message:",
    "value" => variable_get("urgent_msg", ""),
  );
  
  return $form;
}
 
  
/**
 * This is the "main" page for the admin module.  It's what the user
 * first sees when the click to go to the Admin page.
 */
function admin_display_main() {
  $rtn = "";

  fp_add_css(fp_get_module_path("admin") . "/css/admin.css");

  $rtn .= "<h2>" . t("FlightPath Admin Console - Main Menu") . "</h2>";
  $rtn .= "<table class='fp-semester-table' cellpadding='5'>
           <tr>
            <td valign='top' width='50%'>
              " . fp_render_menu_block(t("System Configuration"), "admin/config") . "
            </td>
            <td valign='top' width='50%'>
              ";
              

  // Advising Settings
  $rtn .= fp_render_curved_line("Advising Settings");
  $rtn .= "<div class='admin-advising-settings'>
             
       <ul>
        <li>" . t("Available terms for advising: %v", array("%v" => variable_get("available_advising_term_ids", ""))) . "</li>
        <li>" . t("Default advisint term: %v", array("%v" => variable_get("advising_term_id", ""))) . "</li>          
        <li>" . t("Current catalog year: %v", array("%v" => variable_get("current_catalog_year", ""))) . "</li>       
        <li>" . t("Current draft catalog year: %v", array("%v" => variable_get("current_draft_catalog_year", ""))) . "</li>             
        
      </ul>";
  
  if (user_has_permission("can_edit_advising_settings")) {
    $rtn .= l(t("Edit Advising Settings"), "admin/edit-advising-settings");
  }
  
  $rtn .= "</div>";
    

                            
              
  $rtn .= "</td>
                        
           </tr>";
  $rtn .= "</table><br>"; // close table


  $settings = fp_get_system_settings();
  
  if (user_has_permission("can_access_data_entry")) {
    $rtn .= fp_render_curved_line("Data Entry");

    // TODO:  Maybe have a pulldown here of years, then use javascript to hide/show relavant groups.
    
    $rtn .= "<div class='data-entry-cats'>";
    
    for ($t = $settings["current_catalog_year"] +1; $t >= $settings["earliest_catalog_year"]; $t--) {
      $rtn .= "<ul class='data-entry-for-cat data-entry-for-cat-$t'>";
      $rtn .= "<li>" . l(t("Degree plans for @year", array("@year" => $t)), "admin/degrees", "de_catalog_year=$t") . "</li>";
      $rtn .= "<li>" . l(t("Groups for @year", array("@year" => $t)), "admin/groups", "de_catalog_year=$t") . "</li>";
      $rtn .= "<li>" . l(t("Courses for @year", array("@year" => $t)), "admin/courses", "de_catalog_year=$t") . "</li>";
      $rtn .= "</ul>";
    }
    
    $rtn .= "</div>";
    
    // Draft changes?
    $res = db_query("SELECT * FROM draft_instructions");
    if (db_num_rows($res) > 0) {
      $rtn .= "<div class='draft-changes-waiting-msg'>
                      " . t("Draft changes have been made which have yet to be applied.
                      When you are ready for your draft changes to appear in
                      production, click the link below.") . "</div>";
    }
    $rtn .= "<ul class='data-entry-draft-waiting'>
              <li>" . l(t("Apply draft changes"), "admin/apply-draft-changes") . "</li>
           </ul>";
        
  }

  
  
  
  
  
  
  
  
    
  return $rtn;
}




