<?php

/**
 * @file
 * This module displays statistics and reports for FlightPath
 *
 * @return unknown
 */




/**
 * Implementation of hook_menu
 *
 * @return unknown
 */
function stats_menu() {
  $items = array();
  
  $items["admin-tools/stats"] = array(
    "title" => "Usage Stats & Reports",
    "page_callback" => "stats_display_main",
    "access_arguments" => array("can_access_stats"),
    "page_settings" => array(
      "page_show_title" => TRUE,
      "menu_icon" => fp_theme_location() . "/images/popup.gif",
      "target" => "_blank",      
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,
  );
  

  $items["stats/major-counts"] = array(
    "title" => "Major Counts",
    "page_callback" => "stats_report_major_counts",
    "access_arguments" => array("can_access_stats"),
    "page_settings" => array(
      "page_show_title" => TRUE,
      "bool_print" => FALSE,
      "menu_links" => array(         
        0 => array(
          "text" => "Main menu",
          "path" => "admin-tools/stats",
        ),
      ),
    ),    
    "type" => MENU_TYPE_CALLBACK,
  );
  

  $items["stats/selected-degree-options"] = array(
    "title" => "Selected Degree Options",
    "page_callback" => "stats_report_selected_degree_options",
    "access_arguments" => array("can_access_stats"),
    "page_settings" => array(
      "page_show_title" => TRUE,
      "bool_print" => FALSE,
      "menu_links" => array(         
        0 => array(
          "text" => "Main menu",
          "path" => "admin-tools/stats",
        ),
      ),            
    ),    
    "type" => MENU_TYPE_CALLBACK,
  );



  $items["stats/access"] = array(
    "title" => "Access Stats",
    "page_callback" => "stats_report_access_stats",
    "access_arguments" => array("can_access_stats"),
    "page_settings" => array(
      "page_show_title" => TRUE,
      "bool_print" => FALSE,
      "menu_links" => array(         
        0 => array(
          "text" => "Main menu",
          "path" => "admin-tools/stats",
        ),
      ),      
    ),    
    "type" => MENU_TYPE_CALLBACK,
  );



  $items["stats/advisor-use"] = array(
    "title" => "Advisor Use",
    "page_callback" => "stats_report_advisor_use",
    "access_arguments" => array("can_access_stats"),
    "page_settings" => array(
      "page_show_title" => TRUE,
      "bool_print" => FALSE,
      "menu_links" => array(         
        0 => array(
          "text" => "Main menu",
          "path" => "admin-tools/stats",
        ),
      ),      
    ),    
    "type" => MENU_TYPE_CALLBACK,
  );

  

  $items["stats/student-course-list"] = array(
    "title" => "Student Course List",
    "page_callback" => "stats_report_student_course_list",
    "access_arguments" => array("can_access_stats"),
    "page_settings" => array(
      "page_show_title" => TRUE,
      "bool_print" => FALSE,
      "menu_links" => array(         
        0 => array(
          "text" => "Main menu",
          "path" => "admin-tools/stats",
        ),
      ),      
    ),    
    "type" => MENU_TYPE_CALLBACK,
  );  
  
  
  

  $items["stats/flightpath-use-summary"] = array(
    "title" => "FlightPath Use Summary",
    "page_callback" => "stats_report_flightpath_use_summary",
    "access_arguments" => array("can_access_stats"),
    "page_settings" => array(
      "page_show_title" => TRUE,
      "bool_print" => FALSE,
      "menu_links" => array(         
        0 => array(
          "text" => "Main menu",
          "path" => "admin-tools/stats",
        ),
      ),      
    ),    
    "type" => MENU_TYPE_CALLBACK,
  );

    
  
  return $items;
}




/**
 * Implementation of hook_perm().
 * Expects to return an array of permissions recognized by
 * this module.
 * 
 * Ex:   $a = array( 
 *          "deCanDoSomething" => array ( 
 *              "title" => "Can Do Something",
 *              "description" => "Allow the user to do something." 
 *          )
 *        );
 *
 */
function stats_perm() {
  
  $perms = array (
    "can_access_stats" => array(
      "title" => t("Can access/view stats"),
      "description" => t("This allows the user to access the stats module, letting them run
                        reports on usage."),
    ),    
  );

  return $perms;
  
}



/**
 * This report will show which degree options are being selected for degrees which offer options.
 *
 * @return unknown
 */
function stats_report_selected_degree_options() {
  $rtn = "";
  
  
  // What major have they selected?
  $major = trim($_GET["major"]);

  $rtn .= "<form action='" . fp_url("stats/selected-degree-options") . "' method='GET' >";
  $rtn .= stats_draw_majors_with_options_pulldown($major, true);
  $rtn .= "</form>";

  $db = get_global_database_handler();

  if ($major != "")
  { 
    $count_in_major = 0;
    $degree_option_count = array();
    
    $sql = "SELECT * FROM students
            WHERE substring_index(major_code, '|', 1) = '?'
            AND rank_code IN %RANKIN%
            %EXTRA_STUDENTSEARCH_CONDITIONS% ";      
    

    $rank_in = "( '" . join("', '", csv_to_array($GLOBALS["fp_system_settings"]["allowed_student_ranks"])) . "' )";    
    $sql = str_replace("%RANKIN%", $rank_in, $sql);   
    $sql = str_replace("%EXTRA_STUDENTSEARCH_CONDITIONS%", $GLOBALS["fp_system_settings"]["extra_student_search_conditions"], $sql);  

    $result = db_query($sql, $major);
    
    while($cur = db_fetch_array($result))
    {
      extract($cur, 3, "db");
      $count_in_major++;

      $track = "";
      // Does this student have a track (degree option) specified?
      $student_settings = $db->get_student_settings($db_cwid);

      if ($student_settings["major_code"] == $major)
      {
        $track = $student_settings["track_code"];
      }

      if ($track == "")
      {
        $track = t("None selected");
      }

      // Init if not already...
      $degree_option_count[$track] = $degree_option_count[$track]*1;

      $degree_option_count[$track]++;
    }

    arsort($degree_option_count);

    $rtn .= "<table border='1'>
        <tr>
          <th>" . t("Degree Option") . "</th>
          <th>" . t("Count") . "</th>
          <th>" . t("Description") . "</th>
        </tr>";

    foreach($degree_option_count as $d_option => $value)
    {
      //$desc = get_track_title($major,$d_option);
      // figure out the title of the track...
      $temp = explode("-", $db_catalog_year);
      $cy = $temp[0];
      $degree_id = $db->get_degree_id($major . "|_" . $d_option, $cy);

      $dp = new DegreePlan();
      $dp->degree_id = $degree_id;
      $dp->load_descriptive_data();
      $desc = $dp->track_title;


      $rtn .= "<tr><td valign='top'>
              $d_option
            </td>
            <td valign='top'>
              $value
            </td>
            <td valign='top'>
              $desc
            </td>
            
          </tr>";
    }

    $rtn .= "</table>" . t("Total number of results:") . " $count_in_major.";

  }
  
  
  
  return $rtn;
}



/**
 * Draws a simple form for entering a student's CWID, used by other reports.
 *
 * @param unknown_type $path
 * @param unknown_type $student_cwid
 * @return unknown
 */
function stats_draw_student_cwid_form($path, $student_cwid = "") {
  $rtn = "";
  
  $rtn .= "<form action='" . fp_url($path) . "' method='GET' >
            " . t("Enter a student's CWID to see their courses") . "
            <br>
            <input type='textfield' value='$student_cwid' name='student_cwid'>
            <br>
            <input type='submit' value='" . t("Submit") . "'>
          </form> <hr>
          ";  
  
  
  return $rtn;
}



/**
 * Display a major selection pulldown, used by other reports.
 *
 * @param unknown_type $smajor
 * @param unknown_type $display_submit
 * @return unknown
 */
function stats_draw_majors_with_options_pulldown($smajor = "", $display_submit = false)
{

  $db = get_global_database_handler();
  $major_array = array();

  $current_catalog_year = variable_get("current_catalog_year", "");

  $m_a_count = 0;
  $query = "SELECT * FROM degrees
				WHERE  catalog_year = '?'
				AND `exclude`='0'
				ORDER BY `title`  ";
  $result = db_query($query, $current_catalog_year);
  while ($cur_row = $db->db_fetch_array($result)) {
    $major = trim($cur_row["major_code"]);
    if (!$db->get_degree_tracks($major, $current_catalog_year))
    { // only get majors that also have tracks!
      continue;
    }
    $description = trim($cur_row["title"]);
    $type = trim($cur_row["degree_type"]);
    $major_array[$m_a_count]["description"] = $description;
    $major_array[$m_a_count]["major"] = $major;
    $major_array[$m_a_count]["type"] = $type;

    $m_a_count++;


    }


  $rtn .= "
			<table border='0'>
			
          <td valign='middle'>
          
         <select name='major' id='major'><option value=''>" . t("Please select a major with degree options") . "</option>
                      <option value=''>-----------------------------------</option>";

  for ($t = 0; $t < $m_a_count; $t++)
  {
    $sel = "";
    if ($major_array[$t]["major"] == $smajor && $smajor != "")
    {
      $sel = "selected";
    }
    $hyph = "-";
    if ($major_array[$t]["type"] == "" || $major_array[$t]["type"] == "NA")
    {
      $hyph = "";
      $major_array[$t]["type"] = "";
    }

    $rtn .= "<option value='" . $major_array[$t]["major"] . "' $sel>
					" . $major_array[$t]["description"] . " $hyph " . $major_array[$t]["type"] . "
					</option>";
  }


  $rtn .= "                </select> </td>";
  if ($display_submit == true)
  {
    $rtn .= "<td valign='middle'><input type='submit' value='" . t("Select") . "'></td>";
  }

  $rtn .= "</table>";

  return $rtn;

}



/**
 * This report shows how many students are in each major.
 *
 * @return unknown
 */
function stats_report_major_counts() {
  $rtn = "";



  $rtn .= "<table border='1'>
        <tr>
          <th>" . t("Major") . "</th>
          <th>" . t("Count") . "</th>
          <th colspan='2'>" . t("Description") . "</th>          
        </tr>";
  

  $result = db_query("SELECT * FROM degrees
                          GROUP BY major_code 
                          ORDER BY title, major_code ");
  while ($cur = db_fetch_array($result)) {
    $count = 0;
    $major_code = $cur["major_code"];
    $title = $cur["title"];
    $degree_type = $cur["degree_type"];
    
    // If this is a degree option, skip it, as we do not expect
    // the students table to record degree option choices.
    if (strstr($major_code, "|_")) continue;
    
    // Find out how many students have this major.

    $sql = "SELECT count(cwid) AS count FROM students
            WHERE major_code = '?'
            AND rank_code IN %RANKIN%
            %EXTRA_STUDENTSEARCH_CONDITIONS% ";      
    
    $rank_in = "( '" . join("', '", csv_to_array($GLOBALS["fp_system_settings"]["allowed_student_ranks"])) . "' )";    
    $sql = str_replace("%RANKIN%", $rank_in, $sql);   
    $sql = str_replace("%EXTRA_STUDENTSEARCH_CONDITIONS%", $GLOBALS["fp_system_settings"]["extra_student_search_conditions"], $sql);  
    
    $res2 = db_query($sql, $major_code);
    $cur2 = db_fetch_array($res2);
    
    if (is_numeric($cur2["count"])) {
     $total += $cur2["count"];
    }
    $res_array[$major_code]["count"] = $cur2["count"] * 1;
    $res_array[$major_code]["desc"] = $title;
    $res_array[$major_code]["type"] = $degree_type;
    
  }
  

  foreach($res_array as $major => $value) {

    $rtn .= "<tr>
          <td valign='top' class='tenpt'>$major</td>
          <td valign='top' class='tenpt'>{$value["count"]}</td>
          <td valign='top' class='tenpt'>{$value["type"]}</td>
          <td valign='top' class='tenpt'>{$value["desc"]}</td>
        </tr>";
  }

  $rtn .= "</table>
      " . t("Total student records:") . " $total.";

  
  
    
  return $rtn;
}



/**
 * This report shows common usages in FlightPath by all users.
 * 
 * This is a helpful report for determining which functionality is most popular
 * in FlightPath
 *
 * @return unknown
 */
function stats_report_flightpath_use_summary() {
  $rtn = "";    

  $start_date = trim(addslashes($_REQUEST["start_date"]));
  $end_date = trim(addslashes($_REQUEST["end_date"]));

  $rtn .= stats_draw_date_range_form("stats/flightpath-use-summary", $start_date, $end_date);
  
  if ($start_date == "" || $end_date == "") {
    return $rtn;
  }  
  $start_date .= " 00:00:00";  // make it start at midnight of the startDate.
  $end_date .= " 23:59:59";  // make it go through to midnight of the endDate.
  // Okay, now we get our various counts....

  // Logins...
  $u_student = stats_get_log_count("login","",true,$start_date,$end_date,true);
  $t_student = stats_get_log_count("login","",false,$start_date,$end_date,true);
  $u_staff = stats_get_log_count("login","",true,$start_date,$end_date,false);
  $t_staff = stats_get_log_count("login","",false,$start_date,$end_date,false);
  $rtn .= "<b>System Logins</b>
      <blockquote>
        Unique student logins: $u_student<br>
        Total student logins: $t_student<br>
        ------- <br>
        Unique faculty/staff logins: $u_staff<br>
        Total faculty/staff logins: $t_staff
      </blockquote>
      ";

  // Advisings...
  $regular_advisings = stats_get_log_count("save_adv_active","",false,$start_date,$end_date,false);
  $wi_advisings = stats_get_log_count("save_adv_active_whatif","",false,$start_date,$end_date,false);
  $total_advisings = $regular_advisings + $wi_advisings;
  $rtn .= "<b>Advisings</b>
      <blockquote>
        Total student advisings: $total_advisings <br>
        ------- <br>
        Regular advisings: $regular_advisings<br>
        What If advisings: $wi_advisings
      </blockquote>
      ";

  // Comments...
  $total = stats_get_log_count("save_comment","",false,$start_date,$end_date,false);
  $unique = stats_get_log_count("save_comment","",true,$start_date,$end_date,false);
  $rtn .= "<b>Comments</b>
      <blockquote>
        Total comments saved: $total <br>
        ------- <br>
        Unique faculty/staff commentors: $unique
      </blockquote>
      ";

  // Course search...
  $u_student = stats_get_log_count("course_search","",true,$start_date,$end_date,true);
  $um_student = stats_get_log_count("course_search","",true,$start_date,$end_date,true,true);
  $t_student = stats_get_log_count("course_search","",false,$start_date,$end_date,true);
  $tm_student = stats_get_log_count("course_search","",false,$start_date,$end_date,true, true);
  
  $u_staff = stats_get_log_count("course_search","",true,$start_date,$end_date,false);
  $t_staff = stats_get_log_count("course_search","",false,$start_date,$end_date,false);
  $tm_staff = stats_get_log_count("course_search","",false,$start_date,$end_date,false, true);
  $rtn .= "<b>Course Search</b>
      <blockquote>
        Unique student users: $u_student    <span class='s-mobile'>($um_student mobile)</span><br>
        Total student uses: $t_student    <span class='s-mobile'>($tm_student mobile)</span><br>
        ------- <br>
        Unique faculty/staff users: $u_staff<br>
        Total faculty/staff (and anonymous) uses: $t_staff <span class='s-mobile'>($tm_staff mobile)</span>
      </blockquote>
      ";

  
  // Degree search...
  $u_student = stats_get_log_count("blank_degrees","",true,$start_date,$end_date,true);
  $um_student = stats_get_log_count("blank_degrees","",true,$start_date,$end_date,true,true);
  $t_student = stats_get_log_count("blank_degrees","",false,$start_date,$end_date,true);
  $tm_student = stats_get_log_count("blank_degrees","",false,$start_date,$end_date,true, true);
  $u_staff = stats_get_log_count("blank_degrees","",true,$start_date,$end_date,false);
  $t_staff = stats_get_log_count("blank_degrees","",false,$start_date,$end_date,false);
  $tm_staff = stats_get_log_count("blank_degrees","",false,$start_date,$end_date,false, true);
  $rtn .= "<b>Degree Search (blank degrees)</b>
      <blockquote>
        Unique student users: $u_student    <span class='s-mobile'>($um_student mobile)</span><br>
        Total student uses: $t_student    <span class='s-mobile'>($tm_student mobile)</span><br>
        ------- <br>
        Unique faculty/staff users: $u_staff<br>
        Total faculty/staff (and anonymous) uses: $t_staff <span class='s-mobile'>($tm_staff mobile)</span>
      </blockquote>
      ";
  
  
  // View preferences
  $t_student_y = stats_get_log_count("view_by_year","",false,$start_date,$end_date,true);
  $tm_student_y = stats_get_log_count("view_by_year","",false,$start_date,$end_date,true, true);
  $u_student_y = stats_get_log_count("view_by_year","",true,$start_date,$end_date,true);
  $um_student_y = stats_get_log_count("view_by_year","",true,$start_date,$end_date,true, true);
  
  $t_staff_y = stats_get_log_count("view_by_year","",false,$start_date,$end_date,false);

  $t_student_t = stats_get_log_count("view_by_type","",false,$start_date,$end_date,true);
  $tm_student_t = stats_get_log_count("view_by_type","",false,$start_date,$end_date,true, true);
  $u_student_t = stats_get_log_count("view_by_type","",true,$start_date,$end_date,true);
  $um_student_t = stats_get_log_count("view_by_type","",true,$start_date,$end_date,true, true);
  
  
  $t_staff_t = stats_get_log_count("view_by_type","",false,$start_date,$end_date,false);
  $rtn .= "<b>View Preferences</b>
      <blockquote>
        Unique student view-by-year: $u_student_y    <span class='s-mobile'>($um_student_y mobile)</span><br>
        Total student view-by-year: $t_student_y    <span class='s-mobile'>($tm_student_y mobile)</span><br>
        Total faculty/staff view-by-year: $t_staff_y<br>
        ------- <br>
        Unqiue student view-by-type: $u_student_t    <span class='s-mobile'>($um_student_t mobile)</span><br>
        Total student view-by-type: $t_student_t    <span class='s-mobile'>($tm_student_t mobile)</span><br>
        Total faculty/staff view-by-type: $t_staff_t<br>
      </blockquote>
      ";

  // Substitutions
  $t_staff = stats_get_log_count("save_substitution","",false,$start_date,$end_date,false);
  $u_staff = stats_get_log_count("save_substitution","",true,$start_date,$end_date,false);
  $rtn .= "<b>Substitutions</b>
      <blockquote>
        Unique substitutors: $u_staff<br>
        Total substitutions: $t_staff<br>
      </blockquote>
      ";      
  
  return $rtn;
}




/**
 * Used by the use_summary report.  This function will simply return log counts
 * for the specified parameters in the watchdog table.
 *
 * @param unknown_type $action
 * @param unknown_type $action_array
 * @param unknown_type $bool_distinct
 * @param unknown_type $start_date
 * @param unknown_type $end_date
 * @param unknown_type $bool_students
 * @param unknown_type $bool_mobile_only
 * @return unknown
 */
function stats_get_log_count($action = "", $action_array = "", $bool_distinct = false, $start_date, $end_date, $bool_students = true, $bool_mobile_only = false)
{
  
  $action_line = " `type` = '$action' ";
  if (count($action_array) > 1)
  {
    $action_line = "";
    $action_line .= "( ";
    foreach($action_array as $action)
    {
      $action_line .= " `type`='$action' OR";
    }
    $action_line = substr($action_line, 0, -2);
    $action_line .= ") ";
  }

  $count = "count(wid)";
  if ($bool_distinct)
  {
    $count = "count(distinct `user_id`)";
  }

  $user_type = "";
  if ($bool_students)
  {
    $user_type = " `is_student` = '1' ";
  } else {
    $user_type = " `is_faculty` = '1' ";
  }

  if ($bool_mobile_only) {
    $action_line .= "  AND is_mobile = '1' ";
  }
  
  $start_ts = strtotime($start_date);
  $end_ts = strtotime($end_date);
  
  $res = db_query("SELECT $count AS count FROM watchdog
					WHERE
						`timestamp` > '$start_ts' AND `timestamp` < '$end_ts'
					AND $user_type
					AND
						$action_line
					");
  $cur = db_fetch_array($res);
  return $cur["count"] * 1;


}





/**
 * Displays the HTML for the date range form used by several reports.
 * $path is what is the form's ACTION sending to.
 */
function stats_draw_date_range_form($path, $start_date = "", $end_date = "") {
  $rtn = "";
  
  $rtn .= "<form action='" . fp_url($path) . "' method='GET' >
            " . t("Enter dates in the format YYYY-MM-DD (ex: 2012-01-01)") . "
            <br>
            " . t("Start date:") . " <input type='text' name='start_date' value='$start_date' id='start_date'>
            &nbsp; &nbsp;
            " . t("End date:") . " <input type='text' name='end_date' value='$end_date' id='end_date'>
            &nbsp; &nbsp;
            <input type='submit' value='" . t("Submit") . "'>
          </form> <hr>
          <script type='text/javascript'>
            $(function() {
               $('#start_date').datepicker({ dateFormat: 'yy-mm-dd'});
               $('#end_date').datepicker({ dateFormat: 'yy-mm-dd'});
            });
          </script>";  
  
  
  return $rtn;
}


/**
 * This report shows which advisors are using FlightPath most often.
 * 
 *
 * @return unknown
 */
function stats_report_advisor_use() {
  $rtn = "";

  $start_date = trim(addslashes($_REQUEST["start_date"]));
  $end_date = trim(addslashes($_REQUEST["end_date"]));

  $rtn .= stats_draw_date_range_form("stats/advisor-use", $start_date, $end_date);
  
  if ($start_date == "" || $end_date == "") {
    return $rtn;
  }  
  
  $start_date .= " 00:00:00";  // make it start at midnight of the startDate.
  $end_date .= " 23:59:59";  // make it go through to midnight of the endDate.

  $start_ts = strtotime($start_date);
  $end_ts = strtotime($end_date);

  // Now, what we're doing here is we want the names of the advisors,
  // and how many advisings they actually completed for each,
  // as well as which college or department they belong to.  They need
  // to be sorted by college/department.
  $f_array = array();
  $s_array = array();
  
  $result = db_query("SELECT * FROM watchdog a, faculty b, users c
            WHERE 
              a.timestamp > '?' AND a.timestamp < '?'
            AND
              (a.type = 'save_adv_active' OR a.type = 'save_adv_active_whatif')
            AND a.cwid = b.cwid
            AND a.cwid = c.cwid
            AND c.is_faculty = 1
            ORDER BY b.department ", $start_ts, $end_ts);

  while($cur = db_fetch_array($result)) {
    $faculty_id = trim($cur["cwid"]);

    $f_array[$faculty_id] = $f_array[$faculty_id] * 1; // make it a number.
    $f_array[$faculty_id]++;

    $s_array[$faculty_id]["dept_name"] = ucwords(strtolower(trim($cur["department"])));
    $s_array[$faculty_id]["college_name"] = ucwords(strtolower(trim($cur["college"])));
    $s_array[$faculty_id]["name"] = ucwords(strtolower(trim($cur["f_name"]) . " " . trim($cur["l_name"])));



  }
  


  // Sort based on who has advised the most...
  //arsort($f_array);

  $start_date = trim(addslashes($_REQUEST["start_date"]));
  $end_date = trim(addslashes($_REQUEST["end_date"]));

  // Now, output the results...
  $rtn .= "
      <table border='1' width='650'>
        <tr>
          <th>" . t("Name") . "</th>
          <th>" . t("Dept") . "</th>
          <th>#</th>
      </tr>";
  foreach($f_array as $faculty_id => $value)
  {
    $name = $s_array[$faculty_id]["name"];
    $college_name = $s_array[$faculty_id]["college_name"];
    $dept_name = $s_array[$faculty_id]["dept_name"];

    $rtn .= "<tr>
       <td valign='top'>$name</td>
       <td valign='top'>$dept_name</td>
       <td valign='top' align='center'>$value</td>
      </tr>
      
      ";
  }
  $rtn .= "</table>";  

  
  
  return $rtn;
}



/**
 * This report shows recent activity in FlightPath.  It can also be used to see
 * if anyone is "online" in that they would have activity less than 5 minutes old.
 *
 * @return unknown
 */
function stats_report_access_stats() {
  $rtn = "";


  $min = trim(addslashes($_REQUEST["min"]));
  if ($min == "")
  {
    $min = "20";
  }


  $rtn .= "
      <form action='" . fp_url("stats/access") . "' method='GET'>
      " . t("Activity over the last") . " 
      <input type='text' name='min' value='$min' size='2'>
      ";



  $rtn .= t("minutes") . ": <input type='submit' value='->'>
      </form>
      " . t("Unique students in time frame") . ": <!--STUDENTS-->. " . t("Unique faculty/staff in time frame") . ": <!--STAFF--> <br>";

  $rtn .= "<table border='1' width='700'>";

  $cwid_array = array();
  $student_actions = $staff_actions = 0;

  $interval = time() - ($min * 60);
  
  $res = db_query("SELECT * FROM watchdog
              WHERE `timestamp` > '?'
              ORDER BY `timestamp` DESC ", $interval);
  while ($cur = db_fetch_array($res)) {
    extract ($cur, 3, "db");

    $account = fp_load_user($db_user_id);
    
    $bgcol = "white";
    if ($account->is_student) {
      $bgcol = "lightblue";
    }
    else if ($account->is_faculty){
       $bgcol = "pink";
    } 
    
    $minago = round((time() - $db_timestamp) / 60, 0);

    $extra_data = trim(substr($db_extra_data, 0, 18));
    if (strlen($extra_data) < strlen($db_extra_data))
    {
      $extra_data .= "...";
    }

    $pretty_date = format_date($db_timestamp);
    
    $user_type = "";
    if ($account->is_student) {
      $user_type .= "<div>" . t("student") . "</div>";
    }
    if ($account->is_faculty) {
      $user_type .= "<div>" . t("faculty") . "</div>";      
    }
    
    $rtn .= "<tr style='background-color:$bgcol'>
          <td valign='top' class='tenpt'>$account->name</td>
          <td valign='top' class='tenpt'>$account->cwid</td>
          <td valign='top' class='tenpt'>$account->id</td>
          <td valign='top' class='tenpt'>$account->f_name $account->l_name</td>          
          <td valign='top' class='tenpt'>$user_type</td>
          <td valign='top' class='tenpt'>$db_type</td>
          <td valign='top' class='tenpt'>" . t($db_message, unserialize($db_variables)) . "</td>
          <td valign='top' class='tenpt'>$minago " . t("min ago") . " &nbsp; <font size='1'>$pretty_date</font></td>
        </tr>";

    // Let's increase our counters, if this is a new CWID.
    if (!in_array($db_user_id, $cwid_array)) {
      $cwid_array[] = $db_user_id;
      if ($account->is_student) {
        $student_actions++;
      } else if ($account->is_faculty) {
        $staff_actions++;
      }
    }


  }

  // Add in our student and staff action counts
  $rtn = str_replace("<!--STUDENTS-->",$student_actions,$rtn);
  $rtn = str_replace("<!--STAFF-->",$staff_actions,$rtn);


  $rtn .= "</table>";
  
  
  return $rtn;  
}


/**
 * This report shows a list of all of a student's courses which FlightPath is aware of.
 *
 * @return unknown
 */
function stats_report_student_course_list() {
  
  $rtn = "";

  $student_cwid = trim(addslashes($_REQUEST["student_cwid"]));

  $rtn .= stats_draw_student_cwid_form("stats/student-course-list", $student_cwid);
  
  if ($student_cwid == "") {
    return $rtn;
  }    

  // If we have the banner_integration module installed, then get the pidm from banner too
  if (function_exists("banner_integration_get_pidm_for_cwid")) {
    $student_pidm = banner_integration_get_pidm_for_cwid($student_cwid);
  }  
  $student_name = fp_get_student_name($student_cwid);
  $student = new Student($student_cwid);
    
  //var_dump($student->listCoursesTaken->arrayList);

  $rtn .= "
  
  <style>
    .zebra-even {
      background-color: white;
    }
    .zebra-odd {
      background-color: #ddd;
    }
  </style>
  
      <h2>$student_name ($student_cwid)
      ";
  if ($student_pidm) {
    $rtn .= "<br>PIDM: $student_pidm";
  }
  $rtn .= "</h2>  
		  <table border='0' cellspacing='0' cellpadding='6'>
		    <tr>
		      <th>Subject</th>
		      <th>Number</th>
		      <th>Grade</th>
		      <th>Hours</th>
		      <th>Term</th>
		      <th>Transfer?</th>
		    </tr>";
		

  // So that we can sort our list of courses, we will add them to 
  // 2 arrays, one for local courses, one for transfer.
  $local_array = array();
  $transfer_array = array();
 
  $pol = "even";

  $local_hours = 0;
  $transfer_hours = 0;
  
  
  while($student->list_courses_taken->has_more()) {
    $course = $student->list_courses_taken->get_next();
    
    $subjectID = $course->subject_id;
    $courseNum = $course->course_num;
    $grade = $course->grade;
    $hours = $course->hours_awarded;
    if (is_object($course->course_transfer)) {
      $subjectID = $course->course_transfer->subject_id;
      $courseNum = $course->course_transfer->course_num;
      $grade = $course->course_transfer->grade;
      $hours = $course->course_transfer->hours_awarded;
      
      $transfer_hours += $hours;
      
    }
    else {
      // local course
      $local_hours += $hours;
    }

    $html_line = "
              <td>$subjectID</td>
              <td>$courseNum</td>
              <td>$grade</td>
              <td>$hours</td>
              <td>$course->term_id</td>
              <td>" . (($course->bool_transfer) ? "T" : "") . "</td>
            ";

    if ($course->bool_transfer) {
      $transfer_array["$course->term_id~$subjectID~$courseNum"] = $html_line;
    }
    else {
      $local_array["$course->term_id~$subjectID~$courseNum"] = $html_line;
    }
    
       
  }  	
		
  
  // Okay, now let's sort our arrays and display them.
  ksort($transfer_array);
  ksort($local_array);
  
  foreach($local_array as $line) {
    $rtn .= "<tr class='zebra-$pol'>$line</tr>";
    $pol = ($pol == "even")?"odd":"even";
  }

  foreach($transfer_array as $line) {
    $rtn .= "<tr class='zebra-$pol'>$line</tr>";
    $pol = ($pol == "even")?"odd":"even";
  }
  
  

  $rtn .= "</table>
    <hr>
    ";
  
  $rtn .= "<p>" . count($local_array) . " local courses, with $local_hours hours.</p>";
  $rtn .= "<p>" . count($transfer_array) . " transfer courses, with $transfer_hours hours.</p>";
  
  
  
  return $rtn;  
  
  
}



/**
 * Main menu screen for this module.
 *
 * @return unknown
 */
function stats_display_main() {
  $rtn = "";
  
  
  $rtn .= "<ul>";

  $rtn .= "<li>" . l(t("Access Stats"), "stats/access") . "
              <br>
              " . t("See recent access within the system.  This can be useful to see if anyone is currently using the system.") . "
            </li>";
  
  $rtn .= "<li>" . l(t("Major Counts"), "stats/major-counts") . "
              <br>
              " . t("Displays the number of students within each major or major/concentration.") . "
            </li>";
  
  $rtn .= "<li>" . l(t("Selected Degree Options"), "stats/selected-degree-options") . "
              <br>
              " . t("This report will display information about which degree options students/advisors are selecting for particular majors 
                    (ex: General Studies)") . "
            </li>";
 
  $rtn .= "<li>" . l(t("Advisor Use Report"), "stats/advisor-use") . "
              <br>
              " . t("How many students an advisor has advised over a specified time range.") . "
            </li>";

  $rtn .= "<li>" . l(t("Student Course List"), "stats/student-course-list") . "
              <br>
              " . t("List courses a student has taken, which FlightPath is aware of.") . "
            </li>";
  
  
  $rtn .= "<li>" . l(t("FlightPath Use Summary"), "stats/flightpath-use-summary") . "
              <br>
              " . t("A detailed report on how FlightPath is being used over a specified time range.") . "
            </li>";

  
  
  
  
  $rtn .= "</ul>";
  
  return $rtn;
}
