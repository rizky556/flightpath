<?php


function advise_menu() {
  $items = array();
  
  $items["view"] = array(
    "title" => "View",
    "page_callback" => "advise_display_view",
    "access_callback" => TRUE,  
    "tab_family" => "system",
    "page_settings" => array (
      "display_currently_advising" => TRUE,
      "display_greeting" => TRUE,
    ),    
    "weight" => 30,
    "type" => MENU_TYPE_TAB,
  );
  
  $items["advise/handle-advising-submit"] = array(
    "page_callback" => "advise_handle_advising_submit",
    "access_callback" => TRUE,
    "type" => MENU_TYPE_CALLBACK,
  );
  
  
  // My popups....
  
  $items["advise/popup-course-description"] = array(
    "title" => "Description",
    "page_callback" => "advise_display_popup_course_description",
    "access_callback" => TRUE,
    "page_settings" => array(
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),
    "weight" => 10,    
  );

  
  $items["advise/popup-substitute-selected"] = array(
    "title" => "Substitute",
    "page_callback" => "advise_display_popup_substitute_selected",
    "access_callback" => TRUE,
    "page_settings" => array(
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),
    "weight" => 10,    
  );


  $items["advise/popup-group-select"] = array(
    "title" => "Select",
    "page_callback" => "advise_display_popup_group_select",
    "access_callback" => TRUE,
    "page_settings" => array(
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),
    "weight" => 10,    
  );
  

  // Toolbox...

  $items["advise/popup-toolbox/transfers"] = array(
    "title" => "Transfers",
    "page_callback" => "advise_display_popup_toolbox_transfers",
    "access_callback" => TRUE,
    "page_settings" => array(
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),
    "weight" => 10,
    "type" => MENU_TYPE_TAB,
    "tab_family" => "advise-toolbox",
    "file" => get_module_path("advise") . "/advise.toolbox.inc",
  );
  
  $items["advise/popup-toolbox/substitutions"] = array(
    "title" => "Substitutions",
    "page_callback" => "advise_display_popup_toolbox_substitutions",
    "access_callback" => TRUE,
    "page_settings" => array(
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),
    "weight" => 20,
    "type" => MENU_TYPE_TAB,
    "tab_family" => "advise-toolbox",
    "file" => get_module_path("advise") . "/advise.toolbox.inc",
  );
    
  $items["advise/popup-toolbox/moved"] = array(
    "title" => "Moved",
    "page_callback" => "advise_display_popup_toolbox_moved",
    "access_callback" => TRUE,
    "page_settings" => array(
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),
    "weight" => 30,
    "type" => MENU_TYPE_TAB,
    "tab_family" => "advise-toolbox",
    "file" => get_module_path("advise") . "/advise.toolbox.inc",
  );
  
  $items["advise/popup-toolbox/courses"] = array(
    "title" => "Courses",
    "page_callback" => "advise_display_popup_toolbox_courses",
    "access_callback" => TRUE,
    "page_settings" => array(
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),
    "weight" => 40,
    "type" => MENU_TYPE_TAB,
    "tab_family" => "advise-toolbox",
    "file" => get_module_path("advise") . "/advise.toolbox.inc",
  );
    
  
  
  return $items;
}




function advise_display_popup_group_select() {
  global $current_student_id, $fp, $screen, $degree_plan;
  $rtn = "";
  
  advise_init_screen();
  fp_add_js(fp_get_module_path("advise") . "/js/advise.js");
  
  $settings = fp_get_system_settings();
  
  $course_id = trim($_GET["course_id"]);
  $group_id = trim(addslashes($_GET["group_id"]));
  $group_hours_remaining = trim(addslashes($_GET["group_hours_remaining"]));
  $semester_num = trim(addslashes($_GET["semester_num"]));
  $perform_action2 = $_REQUEST["perform_action2"]; 
  
  if (!$group = $degree_plan->find_placeholder_group($group_id, $semester_num)) {
    admin_debug("Could not find group $group_id in semester $semester_num.");
  }

  if ($group_id == -88) { 
    // This is the Add a Course group.  We must initialize it, as it
    // does not exist yet.
    // We need to populate this group now.
    $group->list_courses = $fp->get_all_courses_in_catalog_year($settings["current_catalog_year"]);
    $group->title = "Add an Additional Course";
    $group->list_courses->assign_group_id($group_id);
    $group->list_courses->load_course_descriptive_data();
  }


  if ($course_id != "") {
    // Meaning, a course_id was specified, so make sure
    // it is "selected" inside the group and branches.

    $course = new Course();
    $course->course_id = $course_id;

    $temp_course_list = $group->find_courses($course);
    if (!$temp_course_list) {
      $temp_course_list = $degree_plan->find_courses($course_id, $group_id, $semester_num);
    }

    if ($temp_course_list) {
      $temp_course_list->reset_counter();
      while($temp_course_list->has_more()) {
        $temp_course = $temp_course_list->get_next();
        $temp_course->bool_selected = true;
        //$temp_course->assigned_to_semester_num = $semester_num;
      }
    }    
  }

  if ($perform_action2 == "" || $perform_action2 == "select") {
    if ($group) {
      $rtn .= $screen->display_popup_group_select($group, $group_hours_remaining);
    }
    // Create the tabs for the page...
    $tab_array = array();
    $tab_array[0]["title"] = "Description";
    $tab_array[0]["on_click"] = "popupDescribeSelected(\"$group_id\",\"$semester_num\",\"0\",\"\",\"group_hours_remaining=$group_hours_remaining&blank_degree_id=$blank_degree_id\");";
    $tab_array[1]["title"] = "Select";
    $tab_array[1]["active"] = true;

    // If we are allowed to substitute....
    if (user_has_permission("can_substitute") && $group_id != -88 && !$screen->bool_blank) {
      $tab_array[2]["title"] = "Substitute";
      $tab_array[2]["on_click"] = "popupSubstituteSelected(\"0\",\"$group_id\",\"$semester_num\",\"group_hours_remaining=$group_hours_remaining\");";
    }

  }

  if ($perform_action2 == "describe_course") {    
    $rtn .= $screen->display_popup_course_description($course_id,null,$group, true);
    // Create the tabs for the page...
    $tab_array = array();
    $tab_array[0]["title"] = "Description";
    $tab_array[0]["active"] = true;
    $tab_array[1]["title"] = "Select";
    $subject = trim($_GET["selected_subject"]);

    $tab_array[1]["on_click"] = "popupBackToGroupSelect(\"$course_id\",\"$group_id\",\"$semester_num\",\"selected_subject=$subject&group_hours_remaining=$group_hours_remaining&blank_degree_id=$blank_degree_id\");";

    // If we are allowed to substitute....
    if (user_has_permission("can_substitute") && $group_id != -88 && !$screen->bool_blank) {
      $tab_array[2]["title"] = "Substitute";
      $tab_array[2]["on_click"] = "popupSubstituteSelected(\"$course_id\",\"$group_id\",\"$semester_num\",\"group_hours_remaining=$group_hours_remaining\");";
    }
   

  }

  if ($tab_array) {
    fp_set_page_tabs($tab_array);
  }


  return $rtn;
}


function advise_display_popup_substitute_selected() {
  global $current_student_id, $fp, $screen;
  $rtn = "";
  
  advise_init_screen();
  fp_add_js(fp_get_module_path("advise") . "/js/advise.js");
  
  $course_id = trim($_GET["course_id"]);
  $group_id = trim(addslashes($_GET["group_id"]));
  $semester_num = trim(addslashes($_GET["semester_num"]));
  $group_hours_remaining = trim(addslashes($_GET["group_hours_remaining"]));
  
  $rtn .= $screen->display_popup_substitute($course_id, $group_id, $semester_num, $group_hours_remaining);  
   
  
  return $rtn;
}


function advise_display_popup_course_description() {
  global $current_student_id, $screen;
  $rtn = "";

  advise_init_screen();
  
  fp_add_js(fp_get_module_path("advise") . "/js/advise.js");
  
  $data_string = trim($_GET["data_string"]);
  $course = new Course();
  if ($data_string != "")
  {
    //fpm($data_string);
    $course->load_course_from_data_string($data_string);
   
  }

  //$page_content .= $screen->get_javascript_code();
  $rtn .= $screen->display_popup_course_description("", $course);
  // Create the tabs for the page...
  $tab_array = array();
  $tab_array[0]["title"] = "Description";
  $tab_array[0]["active"] = true;


  //if ($_SESSION["fp_can_substitute"] == true && !$screen->bool_blank)
  if (user_has_permission("can_substitute") && !$screen->bool_blank) {
    if ($course->bool_substitution != true && $course->grade == "") { 
      // By checking grade, we are making sure this course has NOT already
      // been taken by the student.  In other words, verify that this course
      // is an unfulfilled requirement on the degree plan ONLY.
      $extra_vars = "hours_avail=$course->max_hours";
      $tab_array[1]["title"] = "Substitute";
      $tab_array[1]["on_click"] = "popupSubstituteSelected(\"$course->course_id\",\"$course->assigned_to_group_id\",\"$course->assigned_to_semester_num\",\"$extra_vars\");";
      
      // I WAS WRONG!!!!!
      // I don't see any reason to make this a javascript function.  I'm going to make it a simple URL link.
      // window.location = "' . $script_filename . '?windowMode=popup&performAction=substituteSelected&course_id=" + course_id + "&group_id=" + group_id + "&semester_num=" + semester_num + "&current_student_id=" + csid + "&" + extraVars;
      //$tab_array[1]["on_click"] = "window.location = \"" . base_path() . "/advise/popup-substitute-selected&window_mode=popup&course_id=$course->course_id&group_id=$course->assigned_to_group_id&semester_num=$course->assigned_to_semester_num&current_student_id=$current_student_id&hours_avail=$course->max_hours\"";      
    }
  }

  fp_set_page_tabs($tab_array);

  //$screen->page_tabs = $screen->draw_tabs($tab_array);
  
  return $rtn;
}



/**
 * Implementation of hook_perm
 */
function advise_perm() {
  $perms = array();
  
  $perms["can_advise_students"] = array(
    "title" => t("Can advise students"),
    "description" => t("The user is allowed to advise other students,
                      by clicking a checkbox next to a course, or by selecting
                      a course from an elective group."),
  );

  $perms["can_substitute"] = array(
    "title" => t("Can substitute"),
    "description" => t("The user is allowed to substitute courses on a student's
                        degree plan."),
  );

  
  
  return $perms;
}



/**
 * This function is called when we need to save an advising record to the database.
 * It should redirect the user afterwards to an appropriate page using fp_goto().
 */
function advise_handle_advising_submit() {
  $rtn = "";

       
  
  $rtn .= "i done submitted";
  return $rtn;
}


/**
 * This is the page which actually displays the "view" for the user
 * to see their advising session, or for an advisor to advise them.
 * 
 */
function advise_display_view() {
  global $user, $fp, $degree_plan, $screen;
  $rtn = "";
  
  // Initialize everything we need to initialize for this advising session.
  advise_init_screen();      
  fp_add_js(fp_get_module_path("advise") . "/js/advise.js");  
  
  if ($GLOBALS["advising_view"] == "type") {
    $screen->view = "type";
    $log_action = "view_by_type";

  } 
  else {

    // Default advising view.  "View by Year"    
  }

  if ($GLOBALS["print_view"] == "yes") {
    $screen->bool_print = true;
    $screen->screen_mode = "not_advising";
    $log_extra .= ",print_view";
  }

  //$page_content .= $screen->display_greeting();

  if ($GLOBALS["advising_what_if"] == "yes" && $GLOBALS["what_if_major_code"] == "") {
    // We are in WhatIf, but we have not selected a major, so give
    // the user a selection screen.
    $screen->screen_mode = "not_advising";
    $rtn .= $screen->display_what_if_selection();
  } 
  else {
    // This is a normal advising screen.  Either View or WhatIf.

    //$page_content .= $screen->display_view_options();

    $screen->build_screen_elements();

    $rtn .= "<form id='mainform' method='POST' action='" . base_path() . "/view'>";
    $rtn .= "<table class='fp-semester-table'>";
    $rtn .= $screen->display_screen();
    $rtn .= "</table>";
    // Add in the required "advising variables"
    $rtn .= $screen->get_hidden_advising_variables("save_draft");
        
    $rtn .= "</form>";

  }

  // If we are in WhatIf mode, let's write something special to
  // the log.
  if ($GLOBALS["advising_what_if"] == "yes" && $GLOBALS["what_if_major_code"] != "")
  {
    $log_action .= "_whatif";
    $log_extra = $GLOBALS["what_if_major_code"] . " " . $GLOBALS["what_if_track_code"];
  }

  //$db->add_to_log($log_action, $log_extra);


  //$screen->build_system_tabs(2, true);
  //if ($GLOBALS["advising_what_if"] == "yes")
  //{
  //  $screen->build_system_tabs(5, true, true);
  //}

  /*
  $screen->page_scroll_top = trim($_POST["scroll_top"]);
  //admin_debug("Finished", "main");
  //admin_debug(strlen($page_content));
  $screen->page_has_search = true;
  if ($_SESSION["fp_user_type"] == "student")
  {
    $screen->page_has_search = false;
  }


  $screen->page_content = $page_content;
  // send to the browser
  $screen->output_to_browser();
  */

  //  print_pre($student->list_courses_taken->toString());
  // Should we re-cache the course inventory?  If there have been any changes
  // to it, then we will see that in a GLOBALS variable...
  if ($GLOBALS["cache_course_inventory"] == true)
  {
    $_SESSION["fp_cache_course_inventory"] = serialize($GLOBALS["fp_course_inventory"]);
  }
   
  return $rtn;
}



/**
 * Load from our advising_session_variables and return the vars array.
 */
function advise_load_advising_variables_from_db($student_id, $faculty_id) {
  $res = db_query("SELECT vars FROM advising_session_variables
                    WHERE faculty_id = '?'
                    AND student_id = '?'
                    ", $faculty_id, $student_id);
  $cur = db_fetch_array($res);
  if (!$rtn = unserialize($cur["vars"])) {
    $rtn = array();
  }
  
  // Make sure certain variables always equal something valid...
  if ($rtn["advising_term_id"] == "") {
    $rtn["advising_term_id"] = "0";        
  }  
  
  return $rtn;
}





/**
 * This function takes various variables from the REQUEST and stores them
 * in our advising_session_variables table for more convenient use later on.
 */
function advise_init_advising_variables($bool_ignore_what_if_variables = FALSE) {
  global $user;
  
  // begin by loading what we already have in the db.
  $vars = advise_load_advising_variables_from_db($_REQUEST["current_student_id"], $user->id);
    

  // The current student ID is what we append to all session variables
  // dealing with the current student.  We do this so that we will
  // keep session variables unique, so that we can have more than one
  // window open at a time, with multiple students.
  // Therefor, this should never go into the session.
  // Annoyingly, we must pass carry this around on each page in the system.
  $vars["current_student_id"] = $_REQUEST["current_student_id"];
  if ($vars["current_student_id"] == "")
  {
    $vars["current_student_id"] = $_REQUEST["advising_student_id"];
  }

  $csid = $vars["current_student_id"];

  //admin_debug("csid: $csid");
  // Get the student ID.
  $vars["advising_student_id"] = $_REQUEST["advising_student_id"];
  if ($vars["advising_student_id"] == "")
  {
    $vars["advising_student_id"] = $_SESSION["advising_student_id$csid"];
    if ($vars["advising_student_id"] == "")
    { // Default value...
      //$vars["advising_student_id"] = "10035744";
    }
  }


  // Should we load from the Draft advising session?  or the active?
  $vars["advising_load_active"] = $_REQUEST["advising_load_active"];
  if ($vars["advising_load_active"] == "")
  { // values will either be "yes" or "" (any other value than "yes" is
    // considered to be negative.
    // Default value...
    $vars["advising_load_active"] = "";

  }



  /*
  // Get the degree ID.
  $vars["advisingDegreeID"] = $_REQUEST["advisingDegreeID"];
  if ($vars["advisingDegreeID"] == "")
  {
  $vars["advisingDegreeID"] = $_SESSION["advisingDegreeID"];
  if ($vars["advisingDegreeID"] == "")
  { // Default value...
  $vars["advisingDegreeID"] = "586227"; // cosc
  }
  }
  */

  // Get the major_code.
  $vars["advising_major_code"] = $_REQUEST["advising_major_code"];
  //admin_debug($vars["advising_major_code"]);
  if ($vars["advising_major_code"] == "")
  {
    $vars["advising_major_code"] = $_SESSION["advising_major_code$csid"];
    if ($vars["advising_major_code"] == "")
    { // Default value...
      //$vars["advising_major_code"] = "COSC";
    }
  }




  // Get the track_code.
  $vars["advising_track_code"] = $_REQUEST["advising_track_code"];
  if ($vars["advising_track_code"] == "")
  {
    $vars["advising_track_code"] = $_SESSION["advising_track_code$csid"];
    if ($vars["advising_track_code"] == "")
    { // Default value...

    }
  }

  // Update the student's settings?
  $vars["advising_update_student_settings_flag"] = $_REQUEST["advising_update_student_settings_flag"];
  // Make it only come from the POST, for safety.
  if ($vars["advising_update_student_settings_flag"] == "")
  {
    $vars["advising_update_student_settings_flag"] = $_SESSION["advising_update_student_settings_flag$csid"];
    if ($vars["advising_update_student_settings_flag"] == "")
    { // Default value...

    }
  }


  // Update the logged-in user's settings?
  $vars["fp_update_user_settings_flag"] = $_REQUEST["fp_update_user_settings_flag"];
  // Make it only come from the POST, for safety.
  if ($vars["fp_update_user_settings_flag"] == "")
  {
    $vars["fp_update_user_settings_flag"] = $_SESSION["fp_update_user_settings_flag$csid"];
    if ($vars["fp_update_user_settings_flag"] == "")
    { // Default value...

    }
  }



  $settings = fp_get_system_settings();


  $vars["advising_term_id"] = $_REQUEST["advising_term_id"];  // Get it from the GET or POST.
  if ($vars["advising_term_id"] == "")
  {
    // Set to the default advising term.
    $vars["advising_term_id"] = $_SESSION["advising_term_id$csid"];
    if ($vars["advising_term_id"] == "")
    {
      // default value:
      $vars["advising_term_id"] = $settings["advising_term_id"];
      if ($vars["advising_term_id"] == "") {
        // It's STILL blank?!  Just use 0 then.
        $vars["advising_term_id"] = "0";
      }
    }
  }

  // Are we currently in WhatIf mode?
  $vars["advising_what_if"] = $_REQUEST["advising_what_if"];  // Get it from the GET or POST.
  if ($vars["advising_what_if"] == "")
  {
    // Will equal "yes" if we ARE in whatIf mode.
    $vars["advising_what_if"] = $_SESSION["advising_what_if$csid"];
    if ($vars["advising_what_if"] == "")
    {
      // Default value:
      $vars["advising_what_if"] = "no";
    }
  }

  $vars["what_if_major_code"] = $_REQUEST["what_if_major_code"];  // Get it from the GET or POST.
  if ($vars["what_if_major_code"] == "")
  {
    // Will equal "yes" if we ARE in whatIf mode.
    $vars["what_if_major_code"] = $_SESSION["what_if_major_code$csid"];
    if ($vars["what_if_major_code"] == "")
    {
      // Default value:
      $vars["what_if_major_code"] = "";
    }
  }

  $vars["what_if_track_code"] = $_REQUEST["what_if_track_code"];  // Get it from the GET or POST.
  if ($vars["what_if_track_code"] == "")
  {
    // Will equal "yes" if we ARE in whatIf mode.
    $vars["what_if_track_code"] = $_SESSION["what_if_track_code$csid"];
    if ($vars["what_if_track_code"] == "")
    {
      // Default value:
      $vars["what_if_track_code"] = "";
    }
  }


  if ($vars["what_if_major_code"] == "none")
  {
    $vars["what_if_major_code"] = "";
  }
  if ($vars["what_if_track_code"] == "none")
  {
    $vars["what_if_track_code"] = "";
  }
  if ($vars["advising_track_code"] == "none")
  {
    $vars["advising_track_code"] = "";
  }


  // Settings... (from the database)
  $vars["setting_available_advising_term_ids"] = $settings["available_advising_term_ids"];
  $vars["setting_advising_term_id"] = $settings["advising_term_id"];
  $vars["setting_current_catalog_year"] = $settings["current_catalog_year"];
  $vars["setting_current_draft_catalog_year"] = $settings["current_draft_catalog_year"];

  // Are we in Print View?
  $vars["print_view"] = $_REQUEST["print_view"];

  // Should we try to load from the cache?
  $vars["load_from_cache"] = $_REQUEST["load_from_cache"];
  if ($vars["load_from_cache"] == "")
  {
    // By default, attempt to load from cache.
    $vars["load_from_cache"] = "yes";
  }

  // What "view" are we in?  View by Year or by Type?
  // Not the same as printView.  printView should work regardless
  // of our advising_view.
  $vars["advising_view"] = $_REQUEST["advising_view"];
  if ($vars["advising_view"] == "")
  {
    $vars["advising_view"] = $_SESSION["advising_view$csid"];
  }


  // Place values into session.
  $_SESSION["advising_student_id$csid"] = $vars["advising_student_id"];
  $_SESSION["advising_student_id"] = $vars["advising_student_id"]; // used ONLY in the error report popup!
  $_SESSION["advising_major_code$csid"] = $vars["advising_major_code"];
  $_SESSION["advising_track_code$csid"] = $vars["advising_track_code"];
  $_SESSION["advising_term_id$csid"] = $vars["advising_term_id"];
  $_SESSION["advising_what_if$csid"] = $vars["advising_what_if"];
  $_SESSION["what_if_major_code$csid"] = $vars["what_if_major_code"];
  $_SESSION["what_if_track_code$csid"] = $vars["what_if_track_code"];
  $_SESSION["advising_view$csid"] = $vars["advising_view"];


  if ($bool_ignore_what_if_variables == true)
  {
    $vars["advising_what_if"] = "";
    $vars["what_if_major_code"] = "";
    $vars["what_if_track_code"] = "";
  }



// TODO:  not sure that I need this check any more.  Everything will be based on rolls instead.
  if ($_SESSION["fp_user_type"] == "student")
  {
    // The student can only pull up their own information.  This
    // check is to try and prevent a hacker student from trying
    // to pull up someone else's information.
    if ($_SESSION["advising_student_id"] != $_SESSION["fp_user_id"])
    {
      session_destroy();
      die("You do not have access to that function.  Please log back in: <a href='main.php'>Log into FlightPath.</a>");
    }
  }

  // Are we in draft mode?
  if ($_SESSION["fp_draft_mode"] == "yes")
  {
    $vars["bool_use_draft"] = true;
  } else {
    $vars["bool_use_draft"] = false;
  }


  $GLOBALS["fp_advising"] = $vars;
        
}





/**
 * This function takes various variables from the REQUEST and stores them
 * in our advising_session_variables table for more convenient use later on.
 */
function advise_save_advising_variables_to_db($bool_ignore_what_if_variables = FALSE) {
  global $user;
  
  // begin by loading what we already have in the db.
  $vars = advise_load_advising_variables_from_db($_REQUEST["current_student_id"], $user->id);
    

  // The current student ID is what we append to all session variables
  // dealing with the current student.  We do this so that we will
  // keep session variables unique, so that we can have more than one
  // window open at a time, with multiple students.
  // Therefor, this should never go into the session.
  // Annoyingly, we must pass carry this around on each page in the system.
  $vars["current_student_id"] = $_REQUEST["current_student_id"];
  if ($vars["current_student_id"] == "")
  {
    $vars["current_student_id"] = $_REQUEST["advising_student_id"];
  }

  $csid = $vars["current_student_id"];

  //admin_debug("csid: $csid");
  // Get the student ID.
  $vars["advising_student_id"] = $_REQUEST["advising_student_id"];
  if ($vars["advising_student_id"] == "")
  {
    $vars["advising_student_id"] = $_SESSION["advising_student_id$csid"];
    if ($vars["advising_student_id"] == "")
    { // Default value...
      //$vars["advising_student_id"] = "10035744";
    }
  }


  // Should we load from the Draft advising session?  or the active?
  $vars["advising_load_active"] = $_REQUEST["advising_load_active"];
  if ($vars["advising_load_active"] == "")
  { // values will either be "yes" or "" (any other value than "yes" is
    // considered to be negative.
    // Default value...
    $vars["advising_load_active"] = "";

  }



  /*
  // Get the degree ID.
  $vars["advisingDegreeID"] = $_REQUEST["advisingDegreeID"];
  if ($vars["advisingDegreeID"] == "")
  {
  $vars["advisingDegreeID"] = $_SESSION["advisingDegreeID"];
  if ($vars["advisingDegreeID"] == "")
  { // Default value...
  $vars["advisingDegreeID"] = "586227"; // cosc
  }
  }
  */

  // Get the major_code.
  $vars["advising_major_code"] = $_REQUEST["advising_major_code"];
  //admin_debug($vars["advising_major_code"]);
  if ($vars["advising_major_code"] == "")
  {
    $vars["advising_major_code"] = $_SESSION["advising_major_code$csid"];
    if ($vars["advising_major_code"] == "")
    { // Default value...
      //$vars["advising_major_code"] = "COSC";
    }
  }




  // Get the track_code.
  $vars["advising_track_code"] = $_REQUEST["advising_track_code"];
  if ($vars["advising_track_code"] == "")
  {
    $vars["advising_track_code"] = $_SESSION["advising_track_code$csid"];
    if ($vars["advising_track_code"] == "")
    { // Default value...

    }
  }

  // Update the student's settings?
  $vars["advising_update_student_settings_flag"] = $_REQUEST["advising_update_student_settings_flag"];
  // Make it only come from the POST, for safety.
  if ($vars["advising_update_student_settings_flag"] == "")
  {
    $vars["advising_update_student_settings_flag"] = $_SESSION["advising_update_student_settings_flag$csid"];
    if ($vars["advising_update_student_settings_flag"] == "")
    { // Default value...

    }
  }


  // Update the logged-in user's settings?
  $vars["fp_update_user_settings_flag"] = $_REQUEST["fp_update_user_settings_flag"];
  // Make it only come from the POST, for safety.
  if ($vars["fp_update_user_settings_flag"] == "")
  {
    $vars["fp_update_user_settings_flag"] = $_SESSION["fp_update_user_settings_flag$csid"];
    if ($vars["fp_update_user_settings_flag"] == "")
    { // Default value...

    }
  }



  $settings = fp_get_system_settings();


  $vars["advising_term_id"] = $_REQUEST["advising_term_id"];  // Get it from the GET or POST.
  if ($vars["advising_term_id"] == "")
  {
    // Set to the default advising term.
    $vars["advising_term_id"] = $_SESSION["advising_term_id$csid"];
    if ($vars["advising_term_id"] == "")
    {
      // default value:
      $vars["advising_term_id"] = $settings["advising_term_id"];
    }
  }

  // Are we currently in WhatIf mode?
  $vars["advising_what_if"] = $_REQUEST["advising_what_if"];  // Get it from the GET or POST.
  if ($vars["advising_what_if"] == "")
  {
    // Will equal "yes" if we ARE in whatIf mode.
    $vars["advising_what_if"] = $_SESSION["advising_what_if$csid"];
    if ($vars["advising_what_if"] == "")
    {
      // Default value:
      $vars["advising_what_if"] = "no";
    }
  }

  $vars["what_if_major_code"] = $_REQUEST["what_if_major_code"];  // Get it from the GET or POST.
  if ($vars["what_if_major_code"] == "")
  {
    // Will equal "yes" if we ARE in whatIf mode.
    $vars["what_if_major_code"] = $_SESSION["what_if_major_code$csid"];
    if ($vars["what_if_major_code"] == "")
    {
      // Default value:
      $vars["what_if_major_code"] = "";
    }
  }

  $vars["what_if_track_code"] = $_REQUEST["what_if_track_code"];  // Get it from the GET or POST.
  if ($vars["what_if_track_code"] == "")
  {
    // Will equal "yes" if we ARE in whatIf mode.
    $vars["what_if_track_code"] = $_SESSION["what_if_track_code$csid"];
    if ($vars["what_if_track_code"] == "")
    {
      // Default value:
      $vars["what_if_track_code"] = "";
    }
  }


  if ($vars["what_if_major_code"] == "none")
  {
    $vars["what_if_major_code"] = "";
  }
  if ($vars["what_if_track_code"] == "none")
  {
    $vars["what_if_track_code"] = "";
  }
  if ($vars["advising_track_code"] == "none")
  {
    $vars["advising_track_code"] = "";
  }


  // Settings... (from the database)
  $vars["setting_available_advising_term_ids"] = $settings["available_advising_term_ids"];
  $vars["setting_advising_term_id"] = $settings["advising_term_id"];
  $vars["setting_current_catalog_year"] = $settings["current_catalog_year"];
  $vars["setting_current_draft_catalog_year"] = $settings["current_draft_catalog_year"];

  // Are we in Print View?
  $vars["print_view"] = $_REQUEST["print_view"];

  // Should we try to load from the cache?
  $vars["load_from_cache"] = $_REQUEST["load_from_cache"];
  if ($vars["load_from_cache"] == "")
  {
    // By default, attempt to load from cache.
    $vars["load_from_cache"] = "yes";
  }

  // What "view" are we in?  View by Year or by Type?
  // Not the same as printView.  printView should work regardless
  // of our advising_view.
  $vars["advising_view"] = $_REQUEST["advising_view"];
  if ($vars["advising_view"] == "")
  {
    $vars["advising_view"] = $_SESSION["advising_view$csid"];
  }


  // Place values into session.
  $_SESSION["advising_student_id$csid"] = $vars["advising_student_id"];
  $_SESSION["advising_student_id"] = $vars["advising_student_id"]; // used ONLY in the error report popup!
  $_SESSION["advising_major_code$csid"] = $vars["advising_major_code"];
  $_SESSION["advising_track_code$csid"] = $vars["advising_track_code"];
  $_SESSION["advising_term_id$csid"] = $vars["advising_term_id"];
  $_SESSION["advising_what_if$csid"] = $vars["advising_what_if"];
  $_SESSION["what_if_major_code$csid"] = $vars["what_if_major_code"];
  $_SESSION["what_if_track_code$csid"] = $vars["what_if_track_code"];
  $_SESSION["advising_view$csid"] = $vars["advising_view"];


  if ($bool_ignore_what_if_variables == true)
  {
    $vars["advising_what_if"] = "";
    $vars["what_if_major_code"] = "";
    $vars["what_if_track_code"] = "";
  }



// TODO:  not sure that I need this check any more.  Everything will be based on rolls instead.
  if ($_SESSION["fp_user_type"] == "student")
  {
    // The student can only pull up their own information.  This
    // check is to try and prevent a hacker student from trying
    // to pull up someone else's information.
    if ($_SESSION["advising_student_id"] != $_SESSION["fp_user_id"])
    {
      session_destroy();
      die("You do not have access to that function.  Please log back in: <a href='main.php'>Log into FlightPath.</a>");
    }
  }

  // Are we in draft mode?
  if ($_SESSION["fp_draft_mode"] == "yes")
  {
    $vars["bool_use_draft"] = true;
  } else {
    $vars["bool_use_draft"] = false;
  }


  // Okay, now write back to our table.
  // TODO:  Some security checks here?
  db_query("DELETE FROM advising_session_variables 
            WHERE faculty_id = '?'
            AND student_id = '?'
            ", $user->id, $_REQUEST["current_student_id"]);
  db_query("INSERT INTO advising_session_variables
            (faculty_id, student_id, vars, updated)
            VALUES ('?', '?', '?', NOW() )", $user->id, $_REQUEST["current_student_id"], serialize($vars));
            
        
}



/**
 * This function takes various variables from the REQUEST and stores them
 * in our GLOBAL arrays, for more convenient use later on.
 */
function OLD__advise_init_advising_variables($bool_ignore_what_if_variables = FALSE) {
  
    // The current student ID is what we append to all session variables
    // dealing with the current student.  We do this so that we will
    // keep session variables unique, so that we can have more than one
    // window open at a time, with multiple students.
    // Therefor, this should never go into the session.
    // Annoyingly, we must pass carry this around on each page in the system.
    $GLOBALS["current_student_id"] = $_REQUEST["current_student_id"];
    if ($GLOBALS["current_student_id"] == "")
    {
      $GLOBALS["current_student_id"] = $_REQUEST["advising_student_id"];
    }

    $csid = $GLOBALS["current_student_id"];

    //admin_debug("csid: $csid");
    // Get the student ID.
    $GLOBALS["advising_student_id"] = $_REQUEST["advising_student_id"];
    if ($GLOBALS["advising_student_id"] == "")
    {
      $GLOBALS["advising_student_id"] = $_SESSION["advising_student_id$csid"];
      if ($GLOBALS["advising_student_id"] == "")
      { // Default value...
        //$GLOBALS["advising_student_id"] = "10035744";
      }
    }


    // Should we load from the Draft advising session?  or the active?
    $GLOBALS["advising_load_active"] = $_REQUEST["advising_load_active"];
    if ($GLOBALS["advising_load_active"] == "")
    { // values will either be "yes" or "" (any other value than "yes" is
      // considered to be negative.
      // Default value...
      $GLOBALS["advising_load_active"] = "";

    }



    /*
    // Get the degree ID.
    $GLOBALS["advisingDegreeID"] = $_REQUEST["advisingDegreeID"];
    if ($GLOBALS["advisingDegreeID"] == "")
    {
    $GLOBALS["advisingDegreeID"] = $_SESSION["advisingDegreeID"];
    if ($GLOBALS["advisingDegreeID"] == "")
    { // Default value...
    $GLOBALS["advisingDegreeID"] = "586227"; // cosc
    }
    }
    */

    // Get the major_code.
    $GLOBALS["advising_major_code"] = $_REQUEST["advising_major_code"];
    //admin_debug($GLOBALS["advising_major_code"]);
    if ($GLOBALS["advising_major_code"] == "")
    {
      $GLOBALS["advising_major_code"] = $_SESSION["advising_major_code$csid"];
      if ($GLOBALS["advising_major_code"] == "")
      { // Default value...
        //$GLOBALS["advising_major_code"] = "COSC";
      }
    }




    // Get the track_code.
    $GLOBALS["advising_track_code"] = $_REQUEST["advising_track_code"];
    if ($GLOBALS["advising_track_code"] == "")
    {
      $GLOBALS["advising_track_code"] = $_SESSION["advising_track_code$csid"];
      if ($GLOBALS["advising_track_code"] == "")
      { // Default value...

      }
    }

    // Update the student's settings?
    $GLOBALS["advising_update_student_settings_flag"] = $_REQUEST["advising_update_student_settings_flag"];
    // Make it only come from the POST, for safety.
    if ($GLOBALS["advising_update_student_settings_flag"] == "")
    {
      $GLOBALS["advising_update_student_settings_flag"] = $_SESSION["advising_update_student_settings_flag$csid"];
      if ($GLOBALS["advising_update_student_settings_flag"] == "")
      { // Default value...

      }
    }


    // Update the logged-in user's settings?
    $GLOBALS["fp_update_user_settings_flag"] = $_REQUEST["fp_update_user_settings_flag"];
    // Make it only come from the POST, for safety.
    if ($GLOBALS["fp_update_user_settings_flag"] == "")
    {
      $GLOBALS["fp_update_user_settings_flag"] = $_SESSION["fp_update_user_settings_flag$csid"];
      if ($GLOBALS["fp_update_user_settings_flag"] == "")
      { // Default value...

      }
    }



    $settings = fp_get_system_settings();


    $GLOBALS["advising_term_id"] = $_REQUEST["advising_term_id"];  // Get it from the GET or POST.
    if ($GLOBALS["advising_term_id"] == "")
    {
      // Set to the default advising term.
      $GLOBALS["advising_term_id"] = $_SESSION["advising_term_id$csid"];
      if ($GLOBALS["advising_term_id"] == "")
      {
        // default value:
        $GLOBALS["advising_term_id"] = $settings["advising_term_id"];
      }
    }

    // Are we currently in WhatIf mode?
    $GLOBALS["advising_what_if"] = $_REQUEST["advising_what_if"];  // Get it from the GET or POST.
    if ($GLOBALS["advising_what_if"] == "")
    {
      // Will equal "yes" if we ARE in whatIf mode.
      $GLOBALS["advising_what_if"] = $_SESSION["advising_what_if$csid"];
      if ($GLOBALS["advising_what_if"] == "")
      {
        // Default value:
        $GLOBALS["advising_what_if"] = "no";
      }
    }

    $GLOBALS["what_if_major_code"] = $_REQUEST["what_if_major_code"];  // Get it from the GET or POST.
    if ($GLOBALS["what_if_major_code"] == "")
    {
      // Will equal "yes" if we ARE in whatIf mode.
      $GLOBALS["what_if_major_code"] = $_SESSION["what_if_major_code$csid"];
      if ($GLOBALS["what_if_major_code"] == "")
      {
        // Default value:
        $GLOBALS["what_if_major_code"] = "";
      }
    }

    $GLOBALS["what_if_track_code"] = $_REQUEST["what_if_track_code"];  // Get it from the GET or POST.
    if ($GLOBALS["what_if_track_code"] == "")
    {
      // Will equal "yes" if we ARE in whatIf mode.
      $GLOBALS["what_if_track_code"] = $_SESSION["what_if_track_code$csid"];
      if ($GLOBALS["what_if_track_code"] == "")
      {
        // Default value:
        $GLOBALS["what_if_track_code"] = "";
      }
    }


    if ($GLOBALS["what_if_major_code"] == "none")
    {
      $GLOBALS["what_if_major_code"] = "";
    }
    if ($GLOBALS["what_if_track_code"] == "none")
    {
      $GLOBALS["what_if_track_code"] = "";
    }
    if ($GLOBALS["advising_track_code"] == "none")
    {
      $GLOBALS["advising_track_code"] = "";
    }


    // Settings... (from the database)
    $GLOBALS["setting_available_advising_term_ids"] = $settings["available_advising_term_ids"];
    $GLOBALS["setting_advising_term_id"] = $settings["advising_term_id"];
    $GLOBALS["setting_current_catalog_year"] = $settings["current_catalog_year"];
    $GLOBALS["setting_current_draft_catalog_year"] = $settings["current_draft_catalog_year"];

    // Are we in Print View?
    $GLOBALS["print_view"] = $_REQUEST["print_view"];

    // Should we try to load from the cache?
    $GLOBALS["load_from_cache"] = $_REQUEST["load_from_cache"];
    if ($GLOBALS["load_from_cache"] == "")
    {
      // By default, attempt to load from cache.
      $GLOBALS["load_from_cache"] = "yes";
    }

    // What "view" are we in?  View by Year or by Type?
    // Not the same as printView.  printView should work regardless
    // of our advising_view.
    $GLOBALS["advising_view"] = $_REQUEST["advising_view"];
    if ($GLOBALS["advising_view"] == "")
    {
      $GLOBALS["advising_view"] = $_SESSION["advising_view$csid"];
    }


    // Place values into session.
    $_SESSION["advising_student_id$csid"] = $GLOBALS["advising_student_id"];
    $_SESSION["advising_student_id"] = $GLOBALS["advising_student_id"]; // used ONLY in the error report popup!
    $_SESSION["advising_major_code$csid"] = $GLOBALS["advising_major_code"];
    $_SESSION["advising_track_code$csid"] = $GLOBALS["advising_track_code"];
    $_SESSION["advising_term_id$csid"] = $GLOBALS["advising_term_id"];
    $_SESSION["advising_what_if$csid"] = $GLOBALS["advising_what_if"];
    $_SESSION["what_if_major_code$csid"] = $GLOBALS["what_if_major_code"];
    $_SESSION["what_if_track_code$csid"] = $GLOBALS["what_if_track_code"];
    $_SESSION["advising_view$csid"] = $GLOBALS["advising_view"];


    if ($bool_ignore_what_if_variables == true)
    {
      $GLOBALS["advising_what_if"] = "";
      $GLOBALS["what_if_major_code"] = "";
      $GLOBALS["what_if_track_code"] = "";
    }



// TODO:  not sure that I need this check any more.  Everything will be based on rolls instead.
    if ($_SESSION["fp_user_type"] == "student")
    {
      // The student can only pull up their own information.  This
      // check is to try and prevent a hacker student from trying
      // to pull up someone else's information.
      if ($_SESSION["advising_student_id"] != $_SESSION["fp_user_id"])
      {
        session_destroy();
        die("You do not have access to that function.  Please log back in: <a href='main.php'>Log into FlightPath.</a>");
      }
    }

    // Are we in draft mode?
    if ($_SESSION["fp_draft_mode"] == "yes")
    {
      $GLOBALS["bool_use_draft"] = true;
    } else {
      $GLOBALS["bool_use_draft"] = false;
    }

  
  
}

/**
 * Implementation of hook_init
 */
function advise_init() {
  global $current_student_id;
  $current_student_id = $_REQUEST["current_student_id"];
  // Insert our advising vars into the GLOBALS array for easy use later.
  //$GLOBALS["fp_advising"] = advise_load_advising_variables_from_db($current_student_id, $user->id);
  advise_init_advising_variables();
      
}


/**
 * Implementation of hook_clear_cache
 * Called by other modules, this function will take care of clearing
 * anything this module has cached.
 */
function advise_clear_cache() {
  foreach ($_SESSION as $key => $value) {
    if (strstr($key, "cache_")) {
      $_SESSION[$key] = FALSE;
    }
  }
      
  fp_add_message("Advising cache has been cleared.");
  
}


function advise_init_screen() {
  
  global $degree_plan, $student, $fp, $window_mode, $user, $current_student_id, $screen;
  
  $db = get_global_database_handler();
    
  $perform_action = trim(addslashes($_REQUEST["perform_action"]));

  if ($_REQUEST["clear_session"] == "yes") {
    //advise_save_advising_variables_to_db();
    // reload our advising vars into the GLOBALS array for easy use later.
    //$GLOBALS["fp_advising"] = advise_load_advising_variables_from_db($current_student_id, $user->id);
      
  }

  // Insert our advising vars into the GLOBALS array for easy use later.
  //$GLOBALS["fp_advising"] = advise_load_advising_variables_from_db($current_student_id, $user->id);
   
  $bool_what_if = false;
  
  $csid = $current_student_id;

  $cache = $_SESSION["cache_fp$csid"];

  if ($GLOBALS["fp_advising"]["advising_what_if"] == "yes") {
    $major_code = $GLOBALS["fp_advising"]["what_if_major_code"];
    $track_code = $GLOBALS["fp_advising"]["what_if_track_code"];
    $bool_what_if = true;
    $cache = $_SESSION["cache_what_if$csid"];
  }

  $bool_draft = true;
  
  //fpm($GLOBALS["fp_advising"]);
  if ($GLOBALS["fp_advising"]["advising_load_active"] == "yes") { 
    // If we are loading from Active, then rebuild the cache as well.
    $bool_draft = false;
    $GLOBALS["load_from_cache"] = "no";
  }


  // TODO:  not sure that this is being used anymore!  Check with rolls and permissions
  // instead.
  //if ($_SESSION["fp_user_type"] == "student") {
  //  $bool_draft = false;
    // never load a draft advising session if a student
    // is logged in!
 // }


  ///////////////////////
  ///  Disable student data Caching....
  //$GLOBALS["load_from_cache"] = "no";


  // Attempt to load the course inventory cache...
  if ($course_inventory = unserialize($_SESSION["fp_cache_course_inventory"])) {
    $GLOBALS["fp_course_inventory"] = $course_inventory;
  }


  $bool_loaded = FALSE;
  if ($GLOBALS["fp_advising"]["load_from_cache"] == "yes" && $cache != "" && $fp = unserialize($cache)) {
    //fpm("Loading student data from cache...");
    $bool_loaded = TRUE;    
    $fp->db = get_global_database_handler();
    $student = $fp->student;
    if ($student->student_id == "") $bool_loaded = FALSE;
    $degree_plan = $fp->degree_plan;
    $student->db = get_global_database_handler();
    $degree_plan->db = get_global_database_handler();
    //admin_debug("Done Unserializing... $bool_what_if");
  } 
  
  if (!$bool_loaded) {
    //fpm("Loading student data fresh");    
    $fp = new FlightPath();
    $fp->init();    
    $student = $fp->student;
    $degree_plan = $fp->degree_plan;
    $GLOBALS["fp_advising"]["load_from_cache"] = "no";
    $bool_loaded = TRUE;    
    //admin_debug($GLOBALS["advisingMajorCode"]);
  }


  // Should we update the USER settings for anything?
  if ($GLOBALS["fp_advising"]["fp_update_user_settings_flag"] != "") {
    if (!$db->update_user_settings_from_post($user->id)) {
      admin_debug("could not write user settings.");
    }
  }


  if ($perform_action == "save_draft") {
    
    // Save, then reload the student.
    $fp->save_advising_session_from_post(0,true);
    $bool_draft = TRUE;  // load draft, since we just saved it (and changed something)
    //fpm("saved draft");

  }

  if ($perform_action == "save_active") {
    // Save, then go to the history screen.
    $adv_id_array = $fp->save_advising_session_from_post(0,false);
        fpm("saved active");
    // TODO: Use an fp_goto command here to go to the History screen
    
    //display_advisee_history(true, $adv_id_array);
    //die;
  }


  $screen = new AdvisingScreen("", $fp);
  if ($_REQUEST["bool_blank"] == "true") {
    $screen->bool_blank = TRUE;
  }

  
  if ($bool_what_if == true && $GLOBALS["fp_advising"]["what_if_major_code"] == "")  {
    // In other words, we are on the WhatIf tab, but we have not
    // selected a major.  So, just exit out.  We will give the user
    // a display_screen later.
    return;
  }


  if ($GLOBALS["load_from_cache"] != "yes") { 
    // do not load from cache....
    $student->load_student();
    $student->load_student_substitutions();
    $student->load_unassignments();
    
    $student->list_courses_taken->sort_alphabetical_order();
    $student->list_courses_taken->sort_most_recent_first();
    //  print_pre($student->list_courses_taken->toString());


    $fp->flag_outdated_substitutions();
    $fp->assign_courses_to_semesters(); // bare degree plan. not groups.
    $fp->assign_courses_to_groups();
    
  }

  //admin_debug("Serializing...");
  if ($GLOBALS["fp_advising"]["save_to_cache"] != "no" && $window_mode != "popup") {
    if ($bool_what_if == false) { 
      // NOT in whatIf mode.  Normal.
      //admin_debug("start serialize");

      $_SESSION["cache_fp$csid"] = serialize($fp);
      
      //admin_debug(strlen($_SESSION["cache_f_p$csid"]));
      //admin_debug("Done Serializing...normal");
      
    } 
    else {
      // We are in WhatIf mode.
      $_SESSION["cache_what_if$csid"] = serialize($fp);      
      //admin_debug("Done Serializing...what if");


    }
  }


  $fp->load_advising_session_from_database(0,$advising_term_id,$bool_what_if,$bool_draft,0);

  //admin_debug("load advising session");

  // Once we have loaded the advising session, we should always try to load
  // from draft from then on out.
  $GLOBALS["advising_load_active"] = "";

  //admin_debug("mem:" .  round(memory_get_usage(true)/1024/1024,1) . "mb");

  //print_pre($student->list_courses_taken->toString());
  
  
}



