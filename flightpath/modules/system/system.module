<?php
/*
FlightPath was originally designed and programmed by the 
University of Louisiana at Monroe. The original source is 
copyright (C) 2011-present by the University of Louisiana at Monroe.

FlightPath is considered "open source" under the 
GNU General Public License, version 3 or any later version. 
This covers any related files and documentation packaged with 
FlightPath. 

The license is defined in full here: http://www.gnu.org/licenses/gpl.html,
and reproduced in the LICENSE.txt file.

You may modify FlightPath's source code, but this copyright and license
notice must not be modified, and must be included with the source code.
------------------------------
*/


/**
 * Implementation of hook_page_switchboard
 *
 */
/*
function system_page_switchboard() { 
  
  // Check permissions right here.
  if (!user_has_permission("de_can_administer_system_settings")) {
    display_access_denied("System Module");
  }
  
  $perform_action = $_REQUEST["perform_action"];
  
  if ($perform_action == "edit_settings") {
    system_display_settings_form();
  }
  
  if ($perform_action == "perform_submit_settings") {
    system_perform_submit_settings();
  }
  
  
  if ($perform_action == "edit_modules") {
    system_display_modules_form();
  }
  
  if ($perform_action == "perform_submit_modules") {
    system_perform_submit_modules();
  }
  
  
  
}
*/




/**
 * Implementation of hook_perm().
 * Expects to return an array of permissions recognized by
 * this module.
 * 
 * Ex:   $a = array( 
 *          "deCanDoSomething" => array ( 
 *              "title" => "Can Do Something",
 *              "description" => "Allow the user to do something." 
 *          )
 *        );
 *
 */
function system_perm() {
  
  $perms = array (
    "access_logged_in_content" => array(
      "title" => "Access logged-in content",
      "description" => t("This should be given to all authenticated users.  It simply means
                          the user is allowed to view the logged-in area of FlightPath."),
    ),  
    
    "administer_modules" => array(
      "title" => t("Administer modules"),
      "description" => t("This will allow a user to install, enable, disable, and uninstall modules."),
    ),    
    
    "de_can_switch_users" => array(
      "title" => t("Can switch users"),
      "description" => t("This powerful permission allows a user to switch
                        to any other user in the system.  Be sure to 
                        only give to administrators."),
    ),
    
    "de_can_administer_system_settings" => array(
      "title" => t("Can administer system settings"),
      "description" => t("This allows the user to edit any of the FlightPath
                        system settings."),
    ),
    
    "view_fpm_debug" => array(
      "title" => t("View debug output from the fpm() function"),
      "description" => t("The user may view debug output from the fpm() function.
                        Useful for developers."),
    ),                      
       
  );

  return $perms;
  
}



/**
 * Return an array containing the roles which have been assigned to
 * a specific user.
 */
function system_get_roles_for_user($user_id) {
      
  $rtn = array();  
  
  $res = db_query("SELECT * FROM user_roles a, roles b 
                   WHERE user_id = '?' 
                   AND a.rid = b.rid ", $user_id);
  while ($cur = db_fetch_array($res)) {
    $rtn[$cur["rid"]] = $cur["name"];
    
    // Is this person in the users table?  If so, they will get the rid 2 (authenticated)
    // If not, they will get the role 1 (anonymous)
    
    $res2 = db_query("SELECT user_name FROM users WHERE user_id = '?' ", $user_id);
    if (db_num_rows($res2) > 0) {
      $rtn[2] = t("authenticated user");
    }
    else {
      $rtn[1] = t("anonymous user");
    }
    
        
  }
  
  return $rtn;
  
}


/**
 * Hook block regions.
 * 
 * This function simply defines which block regions we will handle.  Each
 * block section should have a unique machine name, so it is best to namespace it with the
 * name of the module, then page or tab it appears on.
 * 
 * The array looks like this:
 * return array(
 *   "system_main" => array(
 *     "title" => t("Main Tab"),
 *     "regions" => array (
 *       "left_col" => array("title" => t("Left Column")),
 *       "right_col" => array("title" => t("Right Column")),
 *      ),
 *   ),
 * );
 *  
 * 
 * REMEMBER to make these machine-names, so only alpha numeric and underscores! 
 */
function system_block_regions() {
  return array(
    "system_main" => array(
      "title" => t("Main Tab"),
      "regions" => array (
        "left_col" => array("title" => t("Left Column")),
        "right_col" => array("title" => t("Right Column")),
       ),
    ),
  );
}



function system_menu() {
  $items = array();
  
  $items["main"] = array(
    "title" => "Main",
    "page_callback" => "system_display_main_page",
    "access_callback" => TRUE,
    "type" => MENU_TYPE_TAB,
    "tab_family" => "system",
    "weight" => 10,
    "page_settings" => array(
      "display_greeting" => TRUE,
      "display_currently_advising" => TRUE,
      "screen_mode" => "not_advising",
      "page_has_search" => TRUE,
    ),
  );
  
  $items["login"] = array(
    "title" => "Login",
    "page_callback" => "system_display_login_page",
    "access_callback" => TRUE,
    "type" => MENU_TYPE_NORMAL_ITEM,
  );

  $items["admin-tools/clear-cache"] = array(
    "title" => "Clear all cache",
    "page_callback" => "system_perform_clear_cache",
    "access_arguments" => array("administer_modules"),
    "type" => MENU_TYPE_NORMAL_ITEM,
  );  

  
  $items["admin/config/system-settings"] = array(
    "title" => "Edit system settings",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("system_settings_form", "system_settings"),
    "access_arguments" => array("de_can_administer_system_settings"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin-tools/admin",    
  );
  
  $items["admin/config/modules"] = array(
    "title" => "Edit modules",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("system_modules_form"),
    "access_arguments" => array("administer_modules"),
    "page_settings" => array(
      "page_has_search" => FALSE,
      "page_banner_is_link" => TRUE,
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Back to main menu",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin-tools/admin",    
  );

  $items["system/uninstall-module"] = array(
    "page_callback" => "system_handle_uninstall_module",
    "page_arguments" => array(2),
    "access_arguments" => array("administer_modules"),
    "type" => MENU_TYPE_CALLBACK,
  );
  
  
  
  $items["admin/config/clear-menu-cache"] = array(
    "title" => "Clear menu cache",
    "page_callback" => "system_perform_clear_menu_cache",
    "access_arguments" => array("administer_modules"),
    "type" => MENU_TYPE_NORMAL_ITEM,
  );  
  
  $items["system-handle-form-submit"] = array(
    "page_callback" => "system_handle_form_submit",
    "access_callback" => TRUE,
    "type" => MENU_TYPE_CALLBACK,
  );  
    
  $items["logout"] = array(
    "title" => "Logout",
    "page_callback" => "system_handle_logout",
    "access_callback" => TRUE,
    "type" => MENU_TYPE_CALLBACK,
  );
  
         

  $items["popup-report-contact"] = array(
    "title" => "Report/Contact",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("system_popup_report_contact_form"),
    "access_callback" => TRUE,
    "page_settings" => array(
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),   
    "type" => MENU_TYPE_CALLBACK,
  );              
           

  $items["popup-contact-form/thank-you"] = array(
    "title" => "Report/Contact",
    "page_callback" => "system_popup_report_contact_thank_you",    
    "access_callback" => TRUE,
    "page_settings" => array(
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),   
    "type" => MENU_TYPE_CALLBACK,
  );                         
                      
           
           
  return $items;
}


/**
 * This is the thank you page you see after submitting the contact form.
 */
function system_popup_report_contact_thank_you() {
  $rtn = "";
  
  $rtn .= fp_render_curved_line(t("Contact the FlightPath Production Team"));
  $rtn .= t("Thank you for submitting to the FlightPath Production Team.  They 
             have received your comment and will review it shortly.") . "<br><br>";
  $rtn .= t("You may now close this window.");
  
  return $rtn;
}


/**
 * This is the form which lets users send an email to the FlightPath production
 * team, 
 */
function system_popup_report_contact_form() {
  $form = array();
 
  fp_set_title("");
  
  $form["mark" . $m++] = array(
    "value" => fp_render_curved_line(t("Contact the FlightPath Production Team")),
  );
  
  if (!user_has_permission("access_logged_in_content")) {
    $form["mark" . $m++] = array(
      "value" => t("We're sorry, but for security reasons you may only access this form
                    if you are logged in to FlightPath."),
    );
    return $form;
  }
  
  $form["mark" . $m++] = array(
    "value" => t("If you've noticed an error or have a suggestion, use this
                  form to contact the FlightPath Production Team."),
  );  
  
  $form["category"] = array(
    "type" => "select",
    "label" => t("Please select a category"),
    "options" => array(
                     t("Advising") => t("Advising"),
                     t("Degree plan") => t("Degree plan"),
                     t("What If?") => t("What If?"),
                     t("Searching") => t("Searching"),
                     t("Comments") => t("Comments"),
                     t("Other") => t("Other"),
                      ),
  );

  $form["comment"] = array(
    "type" => "textarea",
    "label" => t("Comment:"),    
  );
  
  $form["submit"] = array(
    "type" => "submit",
    "value" => t("Send email"),    
  );  
  
  $form["#redirect"] = array("path" => "popup-contact-form/thank-you");    
  return $form;
}


function system_popup_report_contact_form_submit($form, $form_state) {
  global $user;
  
  $category = strip_tags($form_state["values"]["category"]);
  $comment = strip_tags($form_state["values"]["comment"]);
  
  $possible_student = $_SESSION["advising_student_id"];
  
  $user_roles = implode(", ", $user->roles);
  
  $datetime = date("Y-m-d H:i:s", strtotime("now"));

  $headers = "From: FlightPath-noreply@noreply.com\n";
  $subject = t("FLIGHTPATH REPORT CONTACT") . " - $onscreen ";
  $msg = "";
  $msg .= t("You have received a new report/contact on") . " $datetime.\n";
  $msg .= t("Name:") . " $user->name  ID: $user->id  " . t("User roles:") . " $user_roles \n\n";
  $msg .= t("Category:") . " $category  \n";
  $msg .= t("Possible Student:") . " $possible_student  \n";
  $msg .= t("Comment:") . " \n $comment \n\n";
  $msg .= "------------------------------------------------ \n";

  $themd5 = md5($username . $cwid . $problem . $usertype . $onscreen);

  if ($_SESSION["da_error_report_md5"] != $themd5)
  {  // Helps stop people from resubmitting over and over again
    // (by hitting refresh, or by malicious intent)..

    $msg = addslashes($msg);
    $to = variable_get("contact_email_address", "");
    mail($to,$subject,$msg,$headers);

  } 

  $_SESSION["da_error_report_md5"] = $themd5;
  
}








/**
 * This is the "system settings" form.
 */
function system_settings_form() {
  $form = array();
  
  $form["mark" . $m++] = array(
    "value" => t("Use this form to alter the various system settings in FlightPath.
                  Before making changes, it is always good policy to first back up your database."),
                  
  );
  
  $form["contact_email_address"] = array(
    "type" => "textfield",
    "label" => t("Contact email address:"),
    "value" => variable_get("contact_email_address", ""),
    "description" => t("Enter the email address to mail when a user accesses the
                        Contact FlightPath Production Team popup."),
    
  );
    
  $form["theme"] = array(
    "type" => "textfield",
    "label" => t("Theme location:"),
    "value" => variable_get("theme", "themes/classic"),
    "description" => t("Enter the file location for your theme. Do not put preceeding or trailing slashes.  Ex: themes/classic"),    
  );
    

  $form["school_initials"] = array(
    "type" => "textfield",
    "size" => 20,
    "label" => t("School initials:"),
    "value" => variable_get("school_initials", "DEMO"),
    "description" => t("Ex: ULM or BPCC"),    
  );
                  

  $form["earliest_catalog_year"] = array(
    "type" => "textfield",
    "size" => 20,
    "label" => t("Earliest catalog year:"),
    "value" => variable_get("earliest_catalog_year", "2006"),
    "description" => t("This is the earliest possible catalog year FlightPath may look 
                up.  Typically, this is the earliest year for which you have 
                data (ie, when FlightPath went online.
                If FlightPath cannot figure out a catalog year to use,
                it will default to this one. Ex: 2006"),    
  );
  

  $form["graduate_level_course_num"] = array(
    "type" => "textfield",
    "size" => 20,
    "label" => t("Graduate level course num:"),
    "value" => variable_get("graduate_level_course_num", "5000"),
    "description" => t("This is the course num which means 'graduate level', meaning
                anything above it is considered a graduate level course. Ex: 5000"),    
  );
  

  $form["allowed_student_ranks"] = array(
    "type" => "textfield",
    "label" => t("Allowed student ranks (CSV):"),
    "value" => variable_get("allowed_student_ranks", ""),
    "description" => t("This is a list of which student ranks are allowed into FlightPath.
                It should be separated by commas.  These ranks should exactly match
                the rankCode from the human_resources:students table.
                This also affects which students you may search for on the Advisees
                tab. Ex: FR, SO, JR, SR"),    
  );

  $form["extra_student_search_conditions"] = array(
    "type" => "textarea",
    "label" => t("Extra student search conditions:"),
    "value" => variable_get("extra_student_search_conditions", ""),
    "description" => t("This is mysql which will get appended to end end of the WHERE clause of every query
                    relating to search for students.  It is so you can easily add global conditions, for example,
                    to check that the students are admitted or enrolled.  See the studentsearch.php to see
                    its use.  If this setting is not sufficient for customizing the student search, you will
                    need to use the hooks system to simply override the various functions there.
                    example:  \" AND (admitted = '1' OR enrolled = '1') \""),    
  );
    
  
  $form["enrolled_student_search_conditions"] = array(
    "type" => "textarea",
    "label" => t("Enrolled student search conditions:"),
    "value" => variable_get("enrolled_student_search_conditions", ""),
    "description" => t("Similar to the one above it, this is a clause which will only bring up students
                    who are enrolled at the university, and taking courses.  This might be identical to the
                    one above it.  At the moment, this is only being used in the Stats module, and not
                    for any logic in FlightPath, so you might consider it optional."),    
  );


  $form["not_allowed_student_message"] = array(
    "type" => "textarea",
    "label" => t("Not allowed student message:"),
    "value" => variable_get("not_allowed_student_message", ""),
    "description" => t("When a student is NOT allowed into FlightPath because of their
                rank, this message will be displayed."),    
  );
    

  $form["hiding_grades_message"] = array(
    "type" => "textarea",
    "label" => t("Hiding grades message:"),
    "value" => variable_get("hiding_grades_message", ""),
    "description" => t("This message will be displayed when any course on the page
                has its boolHideGrade set to TRUE.  If you are not using
                this functionality, you can leave this blank."),    
  );


  $form["notify_apply_draft_changes_email_address"] = array(
    "type" => "textfield",
    "label" => t("Notify apply draft changes email address:"),
    "value" => variable_get("notify_apply_draft_changes_email_address", ""),
    "description" => t("Enter 1 or more email addresses (separated by comma) to notify when
                draft changes are applied from the admin console.  
                Leave blank to disable."),    
  );

  $form["notify_mysql_error_email_address"] = array(
    "type" => "textfield",
    "label" => t("Notify MySQL error email address:"),
    "value" => variable_get("notify_mysql_error_email_address", ""),
    "description" => t("Enter 1 or more email addresses (separated by comma) to notify when
                a mysql error occurs.  
                Leave blank to disable."),    
  );

  $form["display_mysql_errors"] = array(
    "type" => "select",
    "label" => t("Display MySQL errors?"),
    "options" => array("yes" => t("Yes"), "no" => t("No")),
    "value" => variable_get("display_mysql_errors", array()),
    "description" => t("If set to YES, FlightPath will display MySQL errors on screen."), 
  );    
    
  
  $form["admin_transfer_passcode"] = array(
    "type" => "textfield",
    "label" => t("Admin Apply Draft password:"),
    "value" => variable_get("admin_transfer_passcode", "changeMe"),
    "description" => t("Enter a password which an admin user must enter
                        in order to apply draft changes to FlightPath.
                        This is an added security measure. Ex: p@ssWord569w"),    
  );
    

  $form["retake_grades"] = array(
    "type" => "textfield",
    "label" => t("Retake grades (CSV):"),
    "value" => variable_get("retake_grades", ""),
    "description" => t("List grades, separated by comma, which means 'the student must
                retake this course. They did not earn credit.' Ex: F,W,I"),    
  );
         
  $form["enrolled_grades"] = array(
    "type" => "textfield",
    "label" => t("Enrolled grades (CSV):"),
    "value" => variable_get("enrolled_grades", ""),
    "description" => t("List grades, separated by comma, which means 'the student is
                currently enrolled in this course.' Ex: E,AMID,BMID "),    
  );

  $form["b_or_better"] = array(
    "type" => "textfield",
    "label" => t("B or better grades (CSV):"),
    "value" => variable_get("b_or_better", ""),
    "description" => t("List grades, separated by comma, which are either a B or better."),    
  );

  $form["c_or_better"] = array(
    "type" => "textfield",
    "label" => t("C or better grades (CSV):"),
    "value" => variable_get("c_or_better", ""),
    "description" => t("List grades, separated by comma, which are either a C or better."),    
  );

  $form["d_or_better"] = array(
    "type" => "textfield",
    "label" => t("D or better grades (CSV):"),
    "value" => variable_get("d_or_better", ""),
    "description" => t("List grades, separated by comma, which are either a D or better."),    
  );

  $form["ignore_courses_from_hour_counts"] = array(
    "type" => "textfield",
    "label" => t("Ignore courses from hour counts (CSV):"),
    "value" => variable_get("ignore_courses_from_hour_counts", ""),
    "description" => t("List courses, separated by comma, 
                which should be ignored in hours counts.  This helps
                remedial courses from being applied to hour counts.
                Ex: MATH 093, ENGL 090, UNIV 1001"),    
  );



  $form["term_id_structure"] = array(
    "type" => "textarea",
    "label" => t("Structure of term ID's:"),
    "value" => variable_get("term_id_structure", ""),
    "description" => t("Use this space to define termID structures, one per line.
                Please see the FlightPath documentation on how to set up this field.") . "
                <br>" . t("Ex:") . " 
                <br>[Y4]60, Spring, Spring of [Y4], Spr '[Y2]
                <br>[Y4]40, Fall, Fall of [Y4-1], Fall '[Y2-1]",    
  );

           
  

  $pC .= system_build_element("term_id_structure", "textarea", "Structure of termID's:", 
                "Use this space to define termID structures, one per line.
                Please see the FlightPath documentation on how to set up this field.
                <br>Ex: 
                <br>[Y4]60, Spring, Spring of [Y4], Spr '[Y2]
                <br>[Y4]40, Fall, Fall of [Y4-1], Fall '[Y2-1]
                ");  

                
                
                  
  
  
  return $form;
}



/**
 * Intercepts form submissions from System Settings Forms.
 */
function system_handle_form_submit() {
    
  $callback = $_REQUEST["callback"];
  
  $form_type = $_REQUEST["form_type"];
  $form_include = $_REQUEST["form_include"];
  
  $form_token = $_REQUEST["form_token"];
  // Make sure the form_token is valid!
  if ($form_token != md5($callback . fp_token())) {
    die(t("Sorry, but you have encountered an error.  A form submission was flagged
          as possibly being an invalid or forged submission.  This may constitute a bug
          in the system.  Please report this error to your Systems Administrator."));
  }
  
  if ($form_include != "") {
    // This is a file we need to include in order to complete the submission process.
    include_once($form_include);
  }

    
  // We need to make sure the user has permission to submit this form!
  $form_path = $_REQUEST["form_path"];
  // Check the menu router table for whatever the permissions were for this
  // path, if any.
  if ($form_path != "") {
    $router_item = menu_get_item($form_path) ;
    if (!menu_check_user_access($router_item)) {
      // The user does NOT have access to submit this form!  The fact that
      // it has made it this far means this may be some sort of hacking attempt.
      die(t("Sorry, but you have encountered an error.  A form submission was flagged
          as possibly being an invalid or having insufficient permissions to submit.  
          This may constitute a bug in the system.  
          Please report this error to your Systems Administrator."));
      
    }
  }  
    
  // Let's get our set of allowed values, by looking at the original form,
  // and grab what's in the POST which matches the name.

  $values = array();
  if (function_exists($callback)) {
    $form = fp_get_form($callback);
    foreach ($form as $name => $element) {     
      if (isset($_POST[$name])) {  
        $values[$name] = $_POST[$name];
      }
    }
  }  


  // Does the form have any defined submit_handler's?  If not, let's assign it the
  // default of callback_submit().    
  $submit_handlers = $form["#submit_handlers"];
  if (!is_array($submit_handlers)) $submit_handlers = array();
  
  // If the submit_handlers is empty, then add our default submit handler.  We don't
  // want to do this if the user went out of their way to enter a different handler.
  if (count($submit_handlers) == 0) {
    array_push($submit_handlers, $callback . "_submit");
  } 
  
  // Does the form have any defined validate_handler's?  This works exactly like the submit handler.
  $validate_handlers = $form["#validate_handlers"];
  if (!is_array($validate_handlers)) $validate_handlers = array();
  
  if (count($validate_handlers) == 0) {
    array_push($validate_handlers, $callback . "_validate");
  } 
    
    
  // Let's store our values in the SESSION in case we need them later on.
  // But only if this is NOT a system_settings form!
  if ($form_type != "system_settings") {
    $_SESSION["fp_form_submissions"][$callback]["values"] = $values;
  }

  $form_state = array("values" => $values);

  // Let's pass this through our default form validator (mainly to check for required fields
  // which do not have values entered)
  form_basic_validate($form, $form_state);  

  // Let's now pass it through all of our custom validators, if there are any.
  foreach ($validate_handlers as $validate_callback) {         
    if (function_exists($validate_callback)) {
      call_user_func_array($validate_callback, array(&$form, &$form_state));
    }
  }



  if (!form_has_errors()) {
    // No errors from the validate, so let's continue.
    
    // Is this a "system settings" form, or a normal form?
    if ($form_type == "system_settings") {
      // This is system settings, so let's save all of our values to the variables table.
      // Write our values array to our variable table.
      foreach ($values as $name => $val) {
        
        variable_set($name, $val);
      }
           
      fp_add_message("Settings saved successfully.");      
      
    }

    // Let's go through the form's submit handlers now.
    foreach ($submit_handlers as $submit_callback) {          
      if (function_exists($submit_callback)) {
        call_user_func_array($submit_callback, array(&$form, &$form_state));
      }    
    }

    
    
  }

  // Figure out where we are supposed to redirect the user.
  $redirect_path = $redirect_query = "";

  if (is_array($form["#redirect"])) { 
    $redirect_path = $form["#redirect"]["path"];
    $redirect_query = $form["#redirect"]["query"];    
  }
  else {
    $redirect_path = $_REQUEST["default_redirect_path"];
    $redirect_query = $_REQUEST["default_redirect_query"];
  }
  
  // Okay, go back to where we were!  
  fp_goto($redirect_path, $redirect_query);
   
}


function system_handle_logout() {
  
  // Check for hook_user_logout
  $modules = modules_implement_hook("user_logout");
  foreach($modules as $module) {
    call_user_func($module . '_user_logout');
  }

  // Finish up logging out. 
  
  $_SESSION["fp_logged_in"] = FALSE;
  $_SESSION["fp_user_object"] = FALSE;
  session_destroy();
  session_start();
  
  fp_add_message(t("You have been logged out of FlightPath."));
  fp_goto("<front>");
  
}

/**
 * This function will clear our various caches by calling
 * on the hook_clear_cache in each module.
 */
function system_perform_clear_cache() {
  // Find modules which implement hook_clear_cache
  $modules = modules_implement_hook("clear_cache");
  foreach ($modules as $module) {
    call_user_func($module . '_clear_cache');
  }   
  fp_goto("<front>");
  
}

/**
 * Implements hook_clear_cache
 * Take care of clearing caches managed by this module
 */
function system_clear_cache() {
  
  menu_rebuild_cache();
  
}

/**
 * Clears only the menu cache
 */
function system_perform_clear_menu_cache() {
  menu_rebuild_cache();
  fp_goto("admin-tools/admin");
}



function system_display_login_page($msg = "") {
  $rtn = "";
  
  fp_add_css(fp_get_module_path("system") . "/css/style.css");  
  
  $rtn .= "
    <div class='login-welcome'>
    Welcome to <span class='flightpath-name'>FlightPath</span>, the electronic student
    advising system!
    </div>";

  // if ($screen->settings["urgent_msg"] != "")
  // {
    // $pC .= "<div class='tenpt hypo' style='margin: 10px; padding: 5px;'>
        // <b>Important Notice:</b> " . $screen->convert_b_b_code_to_h_t_m_l($screen->settings["urgent_msg"]) . "
        // </div>";
  // }
// 
  // if ($screen->settings["offline_mode"] == "1") {
    // // Logins have been disabled in the settings.  Do not display the login
    // // form to the user.
    // $pC .= "<div>";
    // $msg = trim($screen->convert_b_b_code_to_h_t_m_l($screen->settings["offline_msg"]));
    // if ($msg != "") {
      // $pC .= $msg;
    // }
    // else {
      // $pC .= "FlightPath is currently offline at this time for maintenance and updates.
             // We are sorry for the inconvenience.  Please try again later.";
    // }
//     
    // $pC .= "</div>";
  // }
  // else {
  
  $rtn .= "<noscript>
            <div style='padding: 5px; background-color: red; color: white; font-size: 12pt; font-weight: bold;'>
            FlightPath requires JavaScript to be enabled in order to
            function correctly.  Please enable JavaScript on your browser
            before continuing.</div>
          </noscript>";
  
  $important_notice = "
      <div class='hypo tenpt' style='padding:5px; text-align: justify;'>
      <b>Important Notice:</b> This degree audit system is intended to assist you in determining 
      your progress toward a degree, but is not an official transcript. 
      Although efforts are made to ensure the accuracy of this system, you 
      should carefully review it and report any discrepancies to your advisor. 
      It is your responsibility to confirm the status of major requirements by 
      consulting a departmental advisor. It is also your responsibility to seek 
      information on all college and major requirements in the undergraduate 
      catalog to which you are assigned. Final confirmation of degree requirements is subject to approval 
      by the major department and Dean.
      </div>
  ";
  
  $w1 = 300;
  if (fp_screen_is_mobile()) $w1 = "90%";
 /* 
  $login_box = "
      <table border='0' width='$w1' align='center' class='blueBorder' cellpadding='0' cellspacing='0'>
      <tr>
       <td class='blueTitle' align='center' height='20' colspan='2'>
       <span class='tenpt' style='color: white' ><b>Please login below...</b></span>
       </td>
      </tr>
      <tr>
      <td colspan=2> &nbsp;
      </td>
      </tr>
      <tr>
          <td align=center valign=top width='35%'>
            
            <span style='color: #660000; '><b>USER:</b></span></td><td valign=top><input type=text name='user_id' id='cwid_box'></td>
          </td>
        </tr>
        <tr>
          <td align=center valign=top>
            <span style='color: #660000; '><b>PASS:</b></span></td>
          <td valign=top><input type='password' name='password'>
          <!-- <br><span class='tenpt' ><a href='javascript: popupHelpWindow(\"help.php?i={$GLOBALS["fp_system_settings"]["login_help_page_id"]}\");' style='text-decoration:none;'>need help logging-in?</a></span> -->
            </td>
        </tr>
        <tr>
          <td align=center>
          </td>
          <td align=left>
        <br>     
        <input type='hidden' name='scrollTop' id='scrollTop'>   
              <input style='font-size: 12pt; color: #660000;' NAME='submit_fun' type='submit' value='Login' onClick='showUpdate(true);submitForm(false);'>
            
            
            <BR><br>
            
  
          </td>
        </tr>
      </table>
   ";
  */
  
  $login_box = fp_render_curved_line("Please login below...");
  $login_box .= fp_render_form("system_login_form");
  
/*  
  $rtn .= "
      <form action='" . base_path() . "/perform-login' method='POST' id='mainform' onSubmit='showUpdate(true);'>  
    ";
  */
 
  if (fp_screen_is_mobile()) {
    // the user is viewing this on a mobile device, so make it look
    // a bit nicer.
    //$pC .= $screen->draw_c_fieldset($important_notice, "View important notice", true);
    $rtn .= $login_box; 
  }
  else {
    // This is NOT mobile, this is a regular desktop browser.
    $rtn .= "
      <table border='0'>
      <tr>
       <td valign='top' width='40%'>
        $important_notice
       </td>
      <td valign='top' style='padding-left: 20px;'>
        $login_box      
  
       </td>
      </tr>
     </table>
     ";
  }
  
  
  return $rtn;
}


/**
 * This draws the form which facilitates logins.
 */
function system_login_form() {
  $form = array();
  
  fp_set_title("");
  
  $form["user"] = array(
    "label" => t("User:"),
    "type" => "textfield",
    "size" => 30,
  );
  
  $form["password"] = array(
    "label" => t("Password:"),
    "type" => "password",
    "size" => 30,
  );
  
  $form["submit"] = array(
    "type" => "submit",
    "value" => t("Login"),
  );
    
  $form["#attributes"] = array("onSubmit" => "showUpdate(true);");    
    
  
  return $form;
}


/**
 * Validate function for the login form.
 * This is where we will do all of the lookups to verify username
 * and password.  If you want to write your own login handler (like for LDAP)
 * this is the function you would duplicate in a custom module, then use hook_form_alter
 * to make your function be the validator, not this one.
 * 
 * We will simply verify the password, then let the submit handler take over from there.
 */
function system_login_form_validate($form, &$form_state) {
  $user = $form_state["values"]["user"];
  $password = $form_state["values"]["password"];
  
  // If the GRANT_FULL_ACCESS is turned on, skip trying to validate
  if ($GLOBALS["fp_system_settings"]["GRANT_FULL_ACCESS"] == TRUE) {
    $user = "admin";
    $form_state["passed_authentication"] = TRUE;
    $form_state["db_row"]["user_id"] = 1;
    $form_state["db_row"]["user_name"] = "FULL ACCESS USER";
    return;
  }  
  
  // Otherwise, check the table normally.  
  // Check the user's password is valid.
  $res = db_query("SELECT * FROM users WHERE user_name = '?' AND password = '?' AND is_disabled = '0' ", $user, md5($password));
  if (db_num_rows($res) == 0) {
    form_error("password", t("Sorry, but that username and password combination could not
                            be found.  Please check your spelling and try again."));
    return;    
  }
  
  $cur = db_fetch_array($res);
  $form_state["db_row"] = $cur;
  
  // If we made it here, then the user successfully authenticated.
  $form_state["passed_authentication"] = TRUE;

  // It will now proceed to the submit handler.  
}


/**
 * Submit handler for login form.
 * If we are here, it probably means we have indeed authenticated.  Just in case, we will
 * test the form_state["passed_authentication"] value, which we expect to have been
 * set in our validate handler.
 * 
 * We will now proceed to actually log the user into the system.
 * 
 */
function system_login_form_submit($form, &$form_state) {
  $user = $form_state["values"]["user"];
  $password = $form_state["value"]["password"];
  $passed = $form_state["passed_authentication"];
  $db_row = $form_state["db_row"];
  
  if (!$passed) {
    fp_add_message(t("Sorry, there has been an error while trying to authenticate the user."));
    return;
  }

    
  $_SESSION["fp_logged_in"] = TRUE;
      
    
  // Set up a new $account object.
  $account = new stdClass();
  $account->name = $db_row["user_name"];
  $account->id = $db_row["user_id"];
  $account->is_faculty = ($db_row["is_faculty"] == "1") ? TRUE : FALSE;
  $account->is_student = ($db_row["is_student"] == "1") ? TRUE : FALSE;
  $account->email = $db_row["email"];
  $account->f_name = $db_row["f_name"];
  $account->l_name = $db_row["l_name"];
  $account->roles = array();
  $account->permissions = array();
    
  // Okay, let's look for all the modules who have implimented hook_user_login
  $modules = modules_implement_hook("user_login");
  foreach ($modules as $module) {
    call_user_func($module . '_user_login', &$account);
  }
  
  // Set the $account to the SESSION.
  $_SESSION["fp_user_object"] = $account;
  
  fp_goto("<front>");
  
}


/**
 * Impliments hook_user_login.
 * 
 * The main thing I want to do here is populate the rolls and permissions
 * arrays in the $account object. 
 */
function system_user_login(&$account) {

 $res = db_query("SELECT * FROM user_roles a,                                
                                roles c
                  WHERE a.user_id = '?'
                  AND a.rid = c.rid", $account->id);
  while($cur = db_fetch_array($res)) {
    $account->roles[$cur["rid"]] = $cur["name"];
  }
      
  // Let's make sure we get the authenticated user role as well, #2.
  $account->roles[2] = "authenticated user";
        
  // Go through each role and add in the permissions for each role.
  foreach ($account->roles as $rid => $val) {
    $perms = fp_get_permissions_for_role($rid);
    // Merge the arrays while KEEPING the original's key.  So don't
    // use array_merge, use the + operator.
    $account->permissions = $account->permissions + $perms;
  }
            
}



/**
 * Display the "main" tab-page for FlightPath.  Displays announcements
 * as well as the Tools menu, and the "special administrative tools" menu.
 */
function system_display_main_page() {
  global $user;
  $rtn = "";

  // If we are not logged in, then we need to re-direct the user to 
  // the login page!
  if ($_SESSION["fp_logged_in"] != TRUE) {
    fp_goto("login");
    return;  
  }


  $rtn .= "<table class='fp-semester-table'>";
  
  fp_add_css(fp_get_module_path("system") . "/css/style.css");
  
  
  $left_col_blocks = blocks_render_blocks("system_main", "left_col");
  $right_col_blocks = blocks_render_blocks("system_main", "right_col");
  
  if (fp_screen_is_mobile()) {
    $rtn .= "<tr><td colspan='2'>$left_col_blocks $right_col_blocks</td></tr>";
  }
  else {
    $rtn .= "<tr><td width='50%' valign='top'  style='padding-right: 10px;'>
              $left_col_blocks
              </td><td width='50%' valign='top' style='padding-left: 10px;'>
                    $right_col_blocks
              </td></tr>";
  }
  
  $rtn .= "</table>";
  
  $rtn .= "<form id='mainform' method='POST'>
      <input type='hidden' id='scrollTop'>
      <input type='hidden' id='performAction' name='performAction'>
      <input type='hidden' id='advisingWhatIf' name='advisingWhatIf'>
      <input type='hidden' id='currentStudentID' name='currentStudentID'>
      </form>";

  //$pC .= $screen->get_javascript_code();


/*
  $screen->page_content = $pC;
  $screen->page_has_search = true;
  if ($_SESSION["fp_user_type"] == "student" || $_SESSION["fp_can_advise"] == false)
  {
    $screen->page_has_search = false;
  }
  $screen->build_system_tabs(0);

 */

  //////////////////////////////////////////////////////////
  // To cut down on how long it takes to load huge groups
  // like Free Electives, we will pre-load some of the course inventory here.
  if ($_SESSION["fp_cached_inventory_flag_one"] != true)
  {
    $load_number = $GLOBALS["fp_system_settings"]["load_course_inventory_on_login_number"];
    if ($load_number > 1) {
      $fp = new FlightPath();
      $fp->cache_course_inventory(0,$load_number);
      $_SESSION["fp_cached_inventory_flag_one"] = true;
    }
  }


  // send to the browser
  //$screen->output_to_browser();
  
  return $rtn;
  
}


function system_blocks() {
  return array(
    "tools" => t("Tools menu"),
    "admin_tools" => t("Admin Tools menu"),
  );
}


function system_render_block($delta) {
  $block = array();

  if ($delta == "tools") {
    $block["title"] = t("Tools");
    $block["body"] = fp_render_menu_block("", "tools");
  }
  
  if ($delta == "admin_tools") {
    $block["title"] = t("Administrative Tools");
    $block["body"] = fp_render_menu_block("", "admin-tools");
  }
  
  // We don't want empty blocks to show up at all.
  if ($block["body"] == "") {
    return FALSE;
  }
  
  
  return $block;
}






/**
 * Called on every page load.
 */
function system_init() {
  // Let's see if the $user object (for the logged-in user) has been set up.
  global $user;
  $user = new stdClass();
      
  if ($_SESSION["fp_logged_in"] == TRUE) {
    // Make sure it doesn't have the anonymous user role (rid == 1).
    if ($_SESSION["fp_user_object"]->roles[1] == "anonymous user") {
      unset($_SESSION["fp_user_object"]->roles[1]);
    }
    
    $user = $_SESSION["fp_user_object"];
  }
  else {
    // User is anonymous, so set it up as such.
    $user->id = 0;
    $user->name = "Anonymous";
    $user->roles = array(1 => "anonymous user");
    $user->permissions = fp_get_permissions_for_role(1);    
  }
    
}




/**
 * Implementation of hook_menu().
 * This tells other parts of FlightPath where to display links
 * to this module, and what to include in the URL.
 *
 */
function OLD__system_menu() {
  
  $items = array();
  
  $items[] = array(
    "title" => "Edit FlightPath System Settings",
    "url" => get_module_action_u_r_l("system") . "&perform_action=edit_settings",
    "location" => "admin_console",
    "icon" => $GLOBALS["fp_system_settings"]["theme"] . "/images/toolbox.gif",
    "weight" => 100,
    "permission" => "de_can_administer_system_settings",
  );
  
$items[] = array(
    "title" => "Edit FlightPath Modules",
    "url" => get_module_action_u_r_l("system") . "&perform_action=edit_modules",
    "location" => "admin_console",
    "icon" => $GLOBALS["fp_system_settings"]["theme"] . "/images/toolbox.gif",
    "weight" => 200,
    "permission" => "de_can_administer_system_settings",
  );  
    
  return $items;
}



/**
 * This function will actually go through the POST and save to our
 * flightpath_system table.
 *
 */
function system_perform_submit_settings() {
  
  $db = get_global_database_handler();
  $csv_to_array = $_SESSION["fp_system"]["csv_to_array"];
  
  $ignore_in_post = array("submit", "perform_action", "n");  
  
  foreach ($_POST as $name => $value) {
    if (in_array($name, $ignore_in_post)) continue;
    
    $ser_value = serialize($value);
    // We were supposed to convert this back to an array first?
    if (in_array($name, $csv_to_array)) {
      $new_array = array();
      $temp = explode(",", $value);
      foreach ($temp as $t) {
        $new_array[] = trim($t);
      }
      $ser_value = serialize($new_array);
    }
    
    // Alright, let's insert!
    $res = $db->db_query("REPLACE INTO flightpath_system_settings (name, value)
	                            VALUES ('?', '?') ", $name, $ser_value);
       
  }
  
  // Reload back into the GLOBALS array...
  $res = $db->db_query("SELECT * FROM flightpath_system_settings");
  while ($cur = $db->db_fetch_array($res)) {
    if ($val = unserialize($cur["value"])) {
      $GLOBALS["fp_system_settings"][$cur["name"]] = $val;
    }
  }  
  
  
  system_display_settings_form("<font color='green'>Settings successfully saved on " .date ("g:i:sa") . ".</font><br><br>");
  
  
}



function system_perform_submit_modules() {
  $db = get_global_database_handler();
  
  $modules = array();
  
  foreach ($_POST as $name => $value) {
    
    if (strstr($name, "module~~_~~")) {
      $module = $value;
      
      $path = $_POST["path~~_~~$module"];
      $version = $_POST["version~~_~~$module"];
      $requires = $_POST["requires~~_~~$module"];
      $weight = $_POST["weight~~_~~$module"];
      $name = $_POST["name~~_~~$module"];
      
      $disabled = "no";
      $enabled = $_POST["enabled~~_~~$module"];
      if ($enabled != "yes") {
        $disabled = "yes";
      }
      
      // Okay, let's put everything into our modules array.
      $modules[$module] = array(
        "path" => $path,
        "version" => $version,
        "requires" => $requires,
        "disabled" => $disabled,
        "weight" => $weight,
        "name" => $name,
      );
      
    }
    
  }
  
  // Okay, now, serialize and add to our settings.
  $ser_value = serialize($modules);
  
  $res = $db->db_query("REPLACE INTO flightpath_system_settings (name, value)
	                            VALUES ('modules', '?') ", $ser_value);
  
  
  // Reload back into the GLOBALS array...
  $res = $db->db_query("SELECT * FROM flightpath_system_settings WHERE name='modules' ");
  $cur = $db->db_fetch_array($res);
  if ($val = unserialize($cur["value"])) {
    $GLOBALS["fp_system_settings"]["modules"] = $val;
  }

  
  
  system_display_modules_form("<font color='green'>Modules successfully saved on " .date ("g:i:sa") . ".</font><br><br>");
    
  
  
}



/**
 * This is the form which an admin may use to manage the modules
 * in the system.
 */
function system_modules_form() {
  $form = array();
  
  fp_add_css(fp_get_module_path("system") . "/css/style.css");
  
  $form["mark" . $m++] = array(
    "value" => t("Use this form to enable or disable modules.  This scans the /modules/ and then /custom/modules/
                  directories."),
  );
  
  
  // Begin by scanning the /modules/ directory.  Anything in there
  // cannot be disabled.
  $module_dirs = array();
  $module_dirs[] = array("start" => "modules", "type" => t("Core"));
  $module_dirs[] = array("start" => "custom/modules", "type" => t("Custom"));
    
  foreach ($module_dirs as $module_dir) {
    $start_dir = $module_dir["start"];
     
    if ($dh = opendir($start_dir)) {
      //$pC .= "<div class='fp-system-modules-type'>{$module_dir["type"]}</div>
      //        <table class='fp-system-modules-table' cellpadding='0' cellspacing='0'>";
              
      $form["mark" . $m++] = array(
        "value" => "<div class='fp-system-modules-type'>{$module_dir["type"]}</div>
                    <table class='fp-system-modules-table' cellpadding='0' cellspacing='0'>",
      );
              
      $pol = "even";
      while ($file = readdir($dh)) {    
        if ($file == "." || $file == "..") continue;
        
        if (is_dir($start_dir . "/" . $file)) {  
         
          // Okay, now look inside and see if there is a .info file.
          if (file_exists("$start_dir/$file/$file.info")) {
            $module = $file;
            $info_contents = file_get_contents("$start_dir/$file/$file.info");
              
            //fpm($info_contents);  
            // From the info_contents variable, split up and place into an array.
            $info_details_array = array();
            $lines = explode("\n", $info_contents);
            foreach ($lines as $line) {
              if (trim($line) == "") continue;
              $temp = explode("=", trim($line));
              $info_details_array[trim($temp[0])] = trim(substr($line, strlen($temp[0]) + 1)); 
            }
            
            $info_details_array["path"] = "$start_dir/$file";
            $info_details_array["module"] = $module;
            
            //fpm($info_details_array);            
            // Expected keys:
            // name, description, version, core, requires (csv), requred (true or false)
            $checked = "";

            $form["mark" . $m++] = array(
              "value" => "<tr class='fp-system-modules-row fp-system-modules-row-$pol'>
                            <td width='35%'>",
            );
                        
            // the Checkbox.            
            // Should it be checked?  We can check the modules table to see if it's enabled/installed or not.
            $installation_status = "";
            $default_value = array();
            $res = db_query("SELECT * FROM modules WHERE name = '?' ", $module);
            $cur = db_fetch_array($res);
            $info_details_array["enabled"] = $cur["enabled"];
            if ($cur["enabled"] == "1") {
              // Yes, it is checked!
              $default_value = array($module => $module);              
            }
            else if ($cur["enabled"] == "") {
              $installation_status = t("not installed");
            }
            else if ($cur["enabled"] == "0") {
              $installation_status = fp_get_js_confirm_link(t("Are you sure you wish to uninstall @module?\\nThis may remove saved data belonging to the module.", array("@module" => $module)), 
                                                            ' window.location="' . fp_url("system/uninstall-module", "module=$module") . '"; ', t("uninstall?")); 
            }
            
            
                        
            $attributes = array();
            if ($info_details_array["required"]) {
              // This is a required module; it cannot be unchecked.
              $attributes["disabled"] = "disabled";
            }
            
            $form["cb__$module"] = array(
              "type" => "checkboxes",              
              "options" => array($module => $info_details_array["name"]),
              "value" => $default_value,
              "suffix" => "<div class='fp-system-modules-machine-name'>$file</div>
                            <div class='fp-system-modules-installation-status'>$installation_status</div>
                            ",
              "attributes" => $attributes,
            ); 
            
            // hidden variable containing the details about this module, for later use on submit.
            $form["module_details__$module"] = array(
              "type" => "hidden",
              "value" => urlencode(serialize($info_details_array)),
            );


            
            // Version & descr.
            $requires = "";
            if ($info_details_array["requires"] != "") {
              $requires = "<div class='fp-system-modules-requires hypo'>
                            <b>" . t("Requires:") . "</b> {$info_details_array["requires"]}
                           </div>";
              
            }
            $form["mark" . $m++] = array(
              "value" => "  </td>
                            <td width='5%' >{$info_details_array["version"]}</td>
                            <td >{$info_details_array["description"]}$requires</td>
                          </tr>
                          ",
                          
            );
                                          
                                                     
            $pol = ($pol == "even") ? "odd" : "even";
            
          } // if file_exists (xml file)        
        } // if is_dir      
      } // while file=readdir
      
      $form["mark" . $m++] = array(
        "value" => "</table>",
      );
      
    } // if opendir($startdir)
  }// foreach moduledirs
  
  $form["submit"] = array(
    "type" => "submit",
    "value" => t("Submit"),
    "prefix" => "<hr>",
  );  
  
  
  return $form;
}


/**
 * Submit handler for the modules form. 
 */
function system_modules_form_submit($form, $form_state) {
    
  // Go through all of the checkboxes which we have "module_details" for.  If there is NOT a corresponding
  // checkbox, it means it wasn't checked, and should be disabled in the database.  Otherwise, it means it WAS
  // checked, and should be enabled/installed.
  //fpm($form_state["values"]);
  
  $did_something = FALSE;
  
  foreach ($form_state["values"] as $key => $value) {
    if (strstr($key, "module_details__")) {
      if ($module_details = unserialize(urldecode($value))) {
        
        $module = $module_details["module"];
        
        // Disabling a module.
        if ($module_details["enabled"] == "1" && !isset($form_state["values"]["cb__$module"])) {
          // So it WAS enabled, but now the checkbox wasn't checked.  So disable it!
          system_disable_module($module_details);
          $did_something = TRUE;
        }
        
        // Enabling a module
        if ($module_details["enabled"] != "1" && isset($form_state["values"]["cb__$module"])) {
          system_enable_module($module_details);
          $did_something = TRUE;
        }
        
      }
    }
  }

  if ($did_something) {
    // We should clear the cache if we did something.
    
    // Refetch all of the modules from the modules table.
    fp_rebuild_modules_list();
    // Rebuild the menu router now.
    menu_rebuild_cache();
  }

  
}



/**
 * Called from the menu (ie, a URL) this function will uninstall a module.
 * 
 */
function system_handle_uninstall_module() {
  $module = $_REQUEST["module"];

  // First, let's get information about this module from the db.
  $res = db_query("SELECT * FROM modules WHERE name = '?' ", $module);
  $cur = db_fetch_array($res);
  // Make sure it is not currently enabled.
  if ($cur["enabled"] == "1") {
    fp_add_message(t("Module %module not yet disabled.  Disable first, then try to uninstall.", array("%module" => $module)));
    return;
  }
  
  // Let's see if we can call hook_uninstall for this module.
  if (include_module($module, TRUE, $cur["path"])) {
    if (include_module_install($module, $cur["path"])) {
      if (function_exists($module . "_uninstall")) {
        call_user_func($module . "_uninstall");
      }
    }
  }
  
  // Remove from the database.
  $res = db_query("DELETE FROM modules WHERE name = '?' ", $module);
  
  
  fp_add_message(t("Uninstalled %module.", array("%module" => $module)));
  
  fp_goto("admin/config/modules");
}


/**
 * Handles the enabling (and possible installatio) of module.
 */
function system_enable_module($module_details) {

  $module = $module_details["module"];
  $path = $module_details["path"];

  $bool_call_hook_install = FALSE;

  // Do we need to attempt to call the hook_install function?
  if ($module_details["enabled"] == "") {
    // Wasn't in the database, so we need to install it.

    // Add to our table.
    // (delete anything all ready there first)      
    $res = db_query("DELETE FROM modules WHERE name = '?' ", $module);
    // Now, add back into the table.
    $res = db_query("INSERT INTO modules (name, path, version, requires, enabled, type, schema_version, info)
                     VALUES ('?', '?', '?', '?', '?', '?', '?', '?')
                     ", $module, $path, $module_details["version"], $module_details["required"], "1", "module",
                        $module_details["schema_version"], serialize($module_details));
    
    $bool_call_hook_install = TRUE;
    
    fp_add_message(t("The module %module has been installed.", array("%module" => $module)));
         
  }


  // If the module has a .install file, begin by including it.
  if (include_module_install($module, $path)) {
      
    // Include the original module file first.
    include_module($module, TRUE, $path);

         
    if ($bool_call_hook_install) {
      // call hook_install if it exists.
      if (function_exists($module . '_install')) {
        call_user_func($module . '_install');
      }
    }     

    // Now, we can call hook_enable, if it exists.
    if (function_exists($module . '_enable')) {
      call_user_func($module . '_enable');
    }
       
  }


  // Update our table.
  $res = db_query("UPDATE modules SET enabled = '1' WHERE name = '?' ", $module);    

  fp_add_message(t("The module %module has been enabled.", array("%module" => $module)));

 
  
}


/**
 * Handles the disabling of the module in question.
 */
function system_disable_module($module_details) {

  $module = $module_details["module"];
  $path = $module_details["path"];

  // This module cannot be disabled!
  if ($module_details["required"] == TRUE) {
    return;
  }

  // If the module has a "hook_disable" in it's path/module.install file, include and call it.  
  if (include_module_install($module, $path) && function_exists($module . '_disable')) {
    call_user_func($module . '_disable');
  }
  
  // Disable it in the modules table.
  $res = db_query("UPDATE modules
                   SET enabled = '0'
                   WHERE name = '?' ", $module);

  fp_add_message(t("The module %module has been disabled.", array("%module" => $module)));  
  
}




/**
 * Similar to the modules page on Drupal, this page will scan various
 * directories, looking for modules (denoted by their .info files)
 * and present them to the user to enable or disable.
 * 
 * Core modules cannot be disabled.
 *
 * @param string $msg
 */
function z__system_display_modules_form($msg = "") {
  $module_action_u_r_l = get_module_action_u_r_l("system");
  $pC = "";
  // for typing convenience...  
  $g = $GLOBALS["fp_system_settings"];
  
  $pC .= "<a class='tenpt' href='admin.php'>Back to main menu.</a><br>";
  $pC .= "<h2>FlightPath Modules</h2>$msg
          Use this form to enable or disable modules.  This scans the /modules/  and then /custom/modules/
          directories.
          <hr>
          <form action='$module_action_u_r_l' method='POST'>
          <input type='hidden' name='n' value='system'>
                    
          ";  
  
  // Begin by scanning the /modules/ directory.  Anything in there
  // cannot be disabled.
  $module_dirs = array();
  $module_dirs[] = array("start" => "modules", "type" => "_core");
  $module_dirs[] = array("start" => "custom/modules", "type" => "_custom");
    
  foreach ($module_dirs as $module_dir) {
    $start_dir = $module_dir["start"];
     
    if ($dh = opendir($start_dir)) {
      $pC .= "<div class='fp-system-modules-type'>{$module_dir["type"]}</div>
              <table class='fp-system-modules-table' cellpadding='0' cellspacing='0'>";
      $pol = "even";
      while ($file = readdir($dh)) {    
        if ($file == "." || $file == "..") continue;
        
        if (is_dir($start_dir . "/" . $file)) {  
         
          // Okay, now look inside and see if there is a .info.xml file.
          if (file_exists("$start_dir/$file/$file.info.xml")) {
            $module = $file;
            $info_xml = file_get_contents("$start_dir/$file/$file.info.xml");
            
            if (!strstr($info_xml, "<module>")) {
              print "<div>Error in $file.info.xml.  You MUST have &lt;module&gt;
                      and &lt;/module&gt; tags around your XML.</div>";
              continue;
            }
            
            $xml_array = fp_xml_to_array2($info_xml);
            //var_dump($xml_array);
            $checked = "";
            
            if (isset($g["modules"][$file]["disabled"]) && $g["modules"][$file]["disabled"] != "yes") {
              $checked = "checked=checked";              
            }
            
            $cb = "<input type='checkbox' name='enabled~~_~~$file' value='yes' $checked>";
            
            if ($xml_array["required"] == "true") {
              // Required!  Must be enabled and readonly.
              $cb = "<input type='checkbox' name='temp' value='' checked=checked disabled=disabled>
                     <input type='hidden' name='enabled~~_~~$file' value='yes'>";
            }
            
            $requires = "";
            if ($xml_array["requires"] != "") {
              $requires = "<div class='fp-system-modules-requires hypo'>
                            <b>Requires:</b> {$xml_array["requires"]}
                           </div>";
            }
            
            $html_safe_name = htmlspecialchars($xml_array["name"], ENT_QUOTES);
            
            $hidden_vars = "
              <input type='hidden' name='module~~_~~$file' value='$file'>
              <input type='hidden' name='path~~_~~$file' value='$start_dir/$file'>
              <input type='hidden' name='version~~_~~$file' value='{$xml_array["version"]}'>
              <input type='hidden' name='requires~~_~~$file' value='{$xml_array["requires"]}'>
              <input type='hidden' name='weight~~_~~$file' value='{$xml_array["weight"]}'>
              <input type='hidden' name='name~~_~~$file' value='$html_safe_name'>
            ";
            
            $pC .= "<tr class='fp-system-modules-row fp-system-modules-row-$pol'>";
            
            $pC .= "<td width='35%'><label>
                        $cb $hidden_vars ";
            $pC .= "   {$xml_array["name"]}
                        <div class='fp-system-modules-machine-name'>$file</div></label></td>
                    <td width='5%'>{$xml_array["version"]}</td>
                    <td>{$xml_array["description"]}$requires</td>";
            $pC .= "</tr>";
            
            $pol = ($pol == "even") ? "odd" : "even";
            
          } // if file_exists (xml file)        
        } // if is_dir      
      } // while file=readdir
      $pC .= "</table>";
    } // if opendir($startdir)
  }// foreach moduledirs
  
  
  
  $pC .= "<input type='hidden' name='performAction' value='performSubmitModules'>
          <input type='submit' value='Submit'>
          </form>";
  
	$screen = new AdvisingScreen("",null,"not_advising");
	
	$screen->add_css(get_module_path("system") . "/css/style.css");
	
	$screen->page_content = $pC;
	$screen->output_to_browser();	  
}



/**
 * This function will display the settings for to the user, so
 * they may edit it.
 *
 */
function z__system_display_settings_form($msg = "") {

  $module_action_u_r_l = get_module_action_u_r_l("system");
    
  $pC = "";
  
  // Wipe out our old csvToArray list...
  unset($_SESSION["fp_system"]["csv_to_array"]);
  
  // for typing convenience...  
  $g = $GLOBALS["fp_system_settings"];
  
  $pC .= "<a class='tenpt' href='admin.php'>Back to main menu.</a><br>";
  $pC .= "<h2>FlightPath System Settings</h2>$msg
          Use this form to alter the various system settings in FlightPath.
          Before making changes, it is always good policy to first back up
          your database (or at least the flightpath_system_settings table).
          <hr>
          <form action='$module_action_u_r_l' method='POST'>
          <input type='hidden' name='n' value='system'>
          ";
  
  
  $pC .= system_build_element("contact_email_address", "", "", 
                "Enter the email address to mail when someone uses
                the Contact FlightPath Production Team popup.");
  
  $pC .= system_build_element("self_u_r_l", "", "URL to FlightPath", 
                "Enter the URL (including http:// or https://) to access
                FlightPath.  Do not use redirects; enter the true URL.");

/*       
  $pC .= system_build_element("fileSystemPath", "", "File Path to FlightPath", 
                "Enter the file system path to FlightPath.  Do not include
                a trailing slash!<br>
                Ex: /www/webservices/flightpath");
*/
                
  $pC .= system_build_element("theme", "", "Theme location", "Enter the file location for your theme. Do not put preceeding or trailing slashes.  Ex: themes/classic");
  
  $pC .= system_build_element("school_initials", "", "School initials", "Ex: ULM or BPCC");
  
  $pC .= system_build_element("login_help_page_id", "", "", "This is the ID# of the help page for login help.  It is used when constructing the 'Need help logging-in?' link.  To use, you will need to create a help page for login instructions, then place its ID here.");
  
  $pC .= system_build_element("earliest_catalog_year", "", "", 
                "This is the earliest possible catalog year FlightPath may look 
                up.  Typically, this is the earliest year for which you have 
                data (ie, when FlightPath went online.
                If FlightPath cannot figure out a catalog year to use,
                it will default to this one.");
  
  $pC .= system_build_element("graduate_level_course_num", "", "", 
                "This is the course num which means 'graduate level', meaning
                anything above it is considered a graduate level course.");  
  
  $pC .= system_build_element("allowed_student_ranks", "", "Allowed student ranks (CSV)", 
                "This is a list of which student ranks are allowed into FlightPath.
                It should be separated by commas.  These ranks should exactly match
                the rankCode from the human_resources:students table.
                This also affects which students you may search for on the Advisees
                tab (in studentsearch.php).", "", TRUE);  
  
  $pC .= system_build_element("extra_student_search_conditions", "textarea", "", 
                "This is mysql which will get appended to end end of the WHERE clause of every query
  relating to search for students.  It is so you can easily add global conditions, for example,
  to check that the students are admitted or enrolled.  See the studentsearch.php to see
  its use.  If this setting is not sufficient for customizing the student search, you will
  need to use the hooks system to simply override the various functions there.
  example:  \" AND (admitted = '1' OR enrolled = '1') \"");  
                
  $pC .= system_build_element("enrolled_student_search_conditions", "textarea", "", 
                "  Similar to the one above it, this is a clause which will only bring up students
  who are enrolled at the university, and taking courses.  This might be identical to the
  one above it.  At the moment, this is only being used in the Stats module, and not
  for any logic in FlightPath, so you might consider it optional.");  
  
                
                
  $pC .= system_build_element("not_allowed_student_message", "textarea", "", 
                "When a student is NOT allowed into FlightPath because of their
                rank, this message will be displayed.");  

  $pC .= system_build_element("hiding_grades_message", "textarea", "", 
                "This message will be displayed when any course on the page
                has its boolHideGrade set to TRUE.  If you are not using
                this functionality, you can leave this blank.");  
                

  $pC .= system_build_element("notify_apply_draft_changes_email_address", "", "Email to notify when draft changes have been applied", 
                "Enter 1 or more email addresses here to notify when
                draft changes are applied from admin.php.  Leave blank to disable.");  
                
  $pC .= system_build_element("notify_my_s_q_l_error_email_address", "", "Email to notify when a mysql error occurs", 
                "Enter 1 or more email addresses here to notify when
                a mysql error occurs.  Leave blank to disable.");  

  $pC .= system_build_element("display_my_s_q_l_errors", "boolean", "", 
                "If TRUE, FlightPath will display MySQL error messages on screen.");  

  $pC .= system_build_element("admin_transfer_passcode", "", "", 
                "Enter a passcode (ie, password) which a Data Entry user must
                  enter in order to apply draft changes to FlightPath.  This
                  is an added security measure. Ex: p@ssWord3356");  
                
  $pC .= system_build_element("retake_grades", "", "Retake grades (CSV)", 
                "List grades, separated by comma, which means 'the student must
                retake this course. They did not earn credit.' Ex: F,W,I ", "", TRUE);  
                
  $pC .= system_build_element("enrolled_grades", "", "Enrolled grades (CSV)", 
                "List grades, separated by comma, which means 'the student is 
                currently enrolled in this course.' Ex: E,AMID,BMID ", "", TRUE);  
                  

  $pC .= system_build_element("b_or_better", "", "B or better (CSV)", 
                "List grades, separated by comma, 
                which are either a B or better. ", "", TRUE);  
                
  $pC .= system_build_element("c_or_better", "", "C or better (CSV)", 
                "List grades, separated by comma, 
                which are either a C or better. ", "", TRUE);  

  $pC .= system_build_element("d_or_better", "", "D or better (CSV)", 
                "List grades, separated by comma, 
                which are either a D or better. ", "", TRUE);  

  $pC .= system_build_element("ignore_courses_from_hour_counts", "", "Ignore courses from hour counts (CSV)", 
                "List courses, separated by comma, 
                which should be ignored in hours counts.  This helps
                remedial courses from being applied to hour counts.
                Ex: MATH 093, ENGL 090, UNIV 1001 ", "", TRUE);  
  

  $pC .= system_build_element("term_id_structure", "textarea", "Structure of termID's:", 
                "Use this space to define termID structures, one per line.
                Please see the FlightPath documentation on how to set up this field.
                <br>Ex: 
                <br>[Y4]60, Spring, Spring of [Y4], Spr '[Y2]
                <br>[Y4]40, Fall, Fall of [Y4-1], Fall '[Y2-1]
                ");  

                
                
                
  $pC .= "<input type='hidden' name='performAction' value='performSubmitSettings'>
          <input type='submit' value='Submit'>
          </form>";
  
	$screen = new AdvisingScreen("",null,"not_advising");
	
	$screen->add_css(get_module_path("system") . "/css/style.css");
	
	$screen->page_content = $pC;
	$screen->output_to_browser();	
  
}


/**
 * Construct an HTML element and return it.
 *
 */
function system_build_element($name, $type = "", $label = "", $description = "", $default_value = "", $csv_to_array = FALSE) {
  
  $rtn = "";
  
  if (!$default_value) {
    $default_value = $GLOBALS["fp_system_settings"][$name];
  }
  
  if (is_array($default_value)) {
    $default_value = @join(", ", $default_value);
  }
  
  if (!$type) {
    $type = "textfield";
  }
  
  if (!$label) {
    $label = $name;
  }
  
  
  if ($type == "textfield") {
    $rtn .= "<div class='fp-system-settings-element fp-system-settings-textfield'>
              <label>$label:</label>
                <div class='fp-system-settings-input'>
                  <input type='textfield' name='$name' value='$default_value'>
                </div>
              ";
    if ($description) {
      $rtn .= "<div class='fp-system-settings-element-description'>$description</div>";
    }
    $rtn .= "</div>";
  }
  
  
  if ($type == "textarea") {
    $rtn .= "<div class='fp-system-settings-element fp-system-settings-textarea'>
              <label>$label:</label>
                <div class='fp-system-settings-input'>
                  <textarea name='$name'>$default_value</textarea>
                </div>
              ";
    if ($description) {
      $rtn .= "<div class='fp-system-settings-element-description'>$description</div>";
    }
    $rtn .= "</div>";
    
  }
  
  if ($type == "boolean") {
    $sel_f = $sel_t = "";
    if ($default_value) {
      $sel_t = "selected";
    }    
    $rtn .= "<div class='fp-system-settings-element fp-system-settings-boolean'>
              <label>$label:</label>
                <div class='fp-system-settings-input'>
                  <select name='$name'>
                    <option value='' $sel_f>FALSE</option>
                    <option value='1' $sel_t>TRUE</option>
                  </select>
                </div>
              ";
    if ($description) {
      $rtn .= "<div class='fp-system-settings-element-description'>$description</div>";
    }
    $rtn .= "</div>";
    
  }
  
  // We need to convert this CSV back into an array when we save it!
  if ($csv_to_array) {
    if (!isset($_SESSION["fp_system"]["csv_to_array"])) {
      $_SESSION["fp_system"]["csv_to_array"] = array();
    }
    // Add to our list.
    $_SESSION["fp_system"]["csv_to_array"][] = $name;
  }
  
  
  return $rtn;
}
