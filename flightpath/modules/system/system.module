<?php
/*
FlightPath was originally designed and programmed by the 
University of Louisiana at Monroe. The original source is 
copyright (C) 2011-present by the University of Louisiana at Monroe.

FlightPath is considered "open source" under the 
GNU General Public License, version 3 or any later version. 
This covers any related files and documentation packaged with 
FlightPath. 

The license is defined in full here: http://www.gnu.org/licenses/gpl.html,
and reproduced in the LICENSE.txt file.

You may modify FlightPath's source code, but this copyright and license
notice must not be modified, and must be included with the source code.
------------------------------
*/


/**
 * Implementation of hook_page_switchboard
 *
 */
function system_page_switchboard() {
  
  // Check permissions right here.
  if (!user_has_permission("de_can_administer_system_settings")) {
    display_access_denied("System Module");
  }
  
  $perform_action = $_REQUEST["perform_action"];
  
  if ($perform_action == "edit_settings") {
    system_display_settings_form();
  }
  
  if ($perform_action == "perform_submit_settings") {
    system_perform_submit_settings();
  }
  
  
  if ($perform_action == "edit_modules") {
    system_display_modules_form();
  }
  
  if ($perform_action == "perform_submit_modules") {
    system_perform_submit_modules();
  }
  
  
  
}





/**
 * Implementation of hook_perm().
 * Expects to return an array of permissions recognized by
 * this module.
 * 
 * Ex:   $a = array( 
 *          "deCanDoSomething" => array ( 
 *              "title" => "Can Do Something",
 *              "description" => "Allow the user to do something." 
 *          )
 *        );
 *
 */
function system_perm() {
  
  $perms = array (
      "de_can_access_admin_console" => array(
      "title" => "Can access the Admin Console",
      "description" => t("This allows the user to log into the Admin Console.
                        "),
    ),

    "de_can_administer_data_entry" => array(
      "title" => t("Can administer Data Entry"),
      "description" => t("This allows the user to edit, update, delete, etc, 
                        the Data Entry components of FlightPath, like Courses,
                        Groups, Degrees, and advising settings."),
    ),
    
    "de_can_administer_users" => array(
      "title" => t("Can administer users"),
      "description" => t("This allows the user to edit other users' permissions
                        in the User Management system, including their own
                        permissions.  Users will only be able to modify
                        permissions which they themselves have been
                        granted."),
    ),

    "de_can_switch_users" => array(
      "title" => t("Can switch users"),
      "description" => t("This powerful permission allows a user to switch
                        to any other user in the system.  Be sure to 
                        only give to administrators."),
    ),
    
    "de_can_administer_system_settings" => array(
      "title" => t("Can administer system settings"),
      "description" => t("This allows the user to edit any of the FlightPath
                        system settings."),
    ),
    "access_admin_debug" => array(
      "title" => t("Access admin_debug function"),
      "description" => t("The user may view output from the admin_debug function.
                        Useful for developers."),
    ),                      
       
  );

  return $perms;
  
}



function system_menu() {
  $items = array();
  
  $items["main"] = array(
    "title" => "Main",
    "page_callback" => "system_display_main_page",
    "access_callback" => TRUE,
    "type" => MENU_TYPE_TAB,
    "tab_family" => "system",
    "weight" => 10,
    "page_settings" => array(
      "display_greeting" => TRUE,
      "display_currently_advising" => TRUE,
      "screen_mode" => "not_advising",
    ),
  );
  
  $items["login"] = array(
    "title" => "Login",
    "page_callback" => "system_display_login_page",
    "access_callback" => TRUE,
    "type" => MENU_TYPE_NORMAL_ITEM,
  );

  // TODO: This one needs admin access!
  $items["admin-tools/clear-cache"] = array(
    "title" => "Clear all cache",
    "page_callback" => "system_perform_clear_cache",
    "access_callback" => TRUE,
    "type" => MENU_TYPE_NORMAL_ITEM,
  );  

  $items["admin-tools/clear-menu-cache"] = array(
    "title" => "Clear menu cache",
    "page_callback" => "system_perform_clear_menu_cache",
    "access_callback" => TRUE,
    "type" => MENU_TYPE_NORMAL_ITEM,
  );  
  
  $items["system-handle-form-submit"] = array(
    "page_callback" => "system_handle_form_submit",
    "access_callback" => TRUE,
    "type" => MENU_TYPE_CALLBACK,
  );  
    
  $items["perform-login"] = array(
    "title" => "Perform Login",
    "page_callback" => "system_handle_login_submit",
    "access_callback" => TRUE,
    "type" => MENU_TYPE_CALLBACK,
  );

  $items["logout"] = array(
    "title" => "Logout",
    "page_callback" => "system_handle_logout",
    "access_callback" => TRUE,
    "type" => MENU_TYPE_CALLBACK,
  );
  
           
  return $items;
}


/**
 * Intercepts form submissions from System Settings Forms.
 */
function system_handle_form_submit() {
    
  $callback = $_POST["callback"];
  $redirect = $_POST["redirect"];
  $redirect_query = $_POST["redirect_query"];
  
  $form_type = $_POST["form_type"];
  $form_include = $_POST["form_include"];
  
  if ($form_include != "") {
    // This is a file we need to include in order to complete the submission process.
    include_once($form_include);
  }

  
  // Let's get our set of allowed values, by looking at the original form,
  // and grab what's in the POST which matches the name.

  $values = array();
  if (function_exists($callback)) {
    $form = call_user_func($callback);
    foreach ($form as $name => $element) {     
      if (isset($_POST[$name])) {  
        $values[$name] = $_POST[$name];
      }
    }
  }  
    
  // Let's store our values in the SESSION in case we need them later on.
  $_SESSION["fp_form_submissions"][$callback]["values"] = $values;

  // Let's pass this through our default form validator (mainly to check for required fields
  // which do not have values entered)
  form_basic_validate($form, array("values" => $values));  
  
  if (!form_has_errors()) {
    // No errors from the basic_validate, so let's continue.
    
    // Is this a "system settings" form, or a normal form?
    if ($form_type == "system_settings") {
      // This is system settings, so let's save all of our values to the variables table.
      
      // Write our values array to our variable table.
      foreach ($values as $name => $val) {
        variable_set($name, $val);
      }
           
      fp_add_message("Settings saved successfully.");      
      
    }
    else if ($form_type == "normal" || $form_type == "") {
      // Normal form.  Let the callback_submit() function have it, if it exists.
      if (function_exists($callback . "_submit")) {
        call_user_func_array($callback . "_submit", array($form, array("values" => $values)));
      }    
    }
  }
  
  // Okay, go back to where we were!  
  fp_goto($redirect, $redirect_query);
   
}


function system_handle_logout() {
  $_SESSION["fp_logged_in"] = FALSE;
  session_destroy();
  return system_display_login_page("<span class='logout-successful'>You have been logged out of FlightPath.</span>");
}

/**
 * This function will clear our various caches by calling
 * on the hook_clear_cache in each module.
 */
function system_perform_clear_cache() {
  // Find modules which implement hook_clear_cache
  $modules = modules_implement_hook("clear_cache");
  foreach ($modules as $module) {
    call_user_func($module . '_clear_cache');
  }   
  fp_goto("<front>");
  
}

/**
 * Implements hook_clear_cache
 * Take care of clearing caches managed by this module
 */
function system_clear_cache() {
  
  menu_rebuild_cache();
  
}

/**
 * Clears only the menu cache
 */
function system_perform_clear_menu_cache() {
  menu_rebuild_cache();
  fp_goto("<front>");
}


/**
 * Handles the submitting of login data.
 */
function system_handle_login_submit() {
  // TODO:  Check for hooks which other modules might wish to hook into
  // Are we bypassing logins in the settings, and just giving this user
  // full_admin access?
  if ($GLOBALS["fp_system_settings"]["GRANT_FULL_ACCESS"] == TRUE) {
    $_SESSION["fp_logged_in"] = TRUE;
    $_SESSION["fp_user_id"] = 1;
    $_SESSION["fp_user_name"] = "FULL ACCESS USER";
    // $_SESSION["fp_user_type"] = "full_admin";
    // $_SESSION["fp_can_advise"] = TRUE;
    // $_SESSION["fp_can_search"] = TRUE;
    // $_SESSION["fp_can_substitute"] = TRUE;
    // $_SESSION["fp_cache_course_inventory"] = false;
    // $_SESSION["fp_can_modify_comments"] = TRUE;
    $_SESSION["fp_user_rolls"][] = "administrator";
    fp_goto("<front>");
    return;
  }  
}


function system_display_login_page($msg = "") {
  $rtn = "";
  
  fp_add_css(fp_get_module_path("system") . "/css/style.css");  
  
  $rtn .= "
    <div class='login-welcome'>
    Welcome to <span class='flightpath-name'>FlightPath</span>, the electronic student
    advising system!
    </div>";

  // if ($screen->settings["urgent_msg"] != "")
  // {
    // $pC .= "<div class='tenpt hypo' style='margin: 10px; padding: 5px;'>
        // <b>Important Notice:</b> " . $screen->convert_b_b_code_to_h_t_m_l($screen->settings["urgent_msg"]) . "
        // </div>";
  // }
// 
  // if ($screen->settings["offline_mode"] == "1") {
    // // Logins have been disabled in the settings.  Do not display the login
    // // form to the user.
    // $pC .= "<div>";
    // $msg = trim($screen->convert_b_b_code_to_h_t_m_l($screen->settings["offline_msg"]));
    // if ($msg != "") {
      // $pC .= $msg;
    // }
    // else {
      // $pC .= "FlightPath is currently offline at this time for maintenance and updates.
             // We are sorry for the inconvenience.  Please try again later.";
    // }
//     
    // $pC .= "</div>";
  // }
  // else {
  
  $rtn .= "<noscript>
            <div style='padding: 5px; background-color: red; color: white; font-size: 12pt; font-weight: bold;'>
            FlightPath requires JavaScript to be enabled in order to
            function correctly.  Please enable JavaScript on your browser
            before continuing.</div>
          </noscript>";
  
  $important_notice = "
      <div class='hypo tenpt' style='padding:5px; text-align: justify;'>
      <b>Important Notice:</b> This degree audit system is intended to assist you in determining 
      your progress toward a degree, but is not an official transcript. 
      Although efforts are made to ensure the accuracy of this system, you 
      should carefully review it and report any discrepancies to your advisor. 
      It is your responsibility to confirm the status of major requirements by 
      consulting a departmental advisor. It is also your responsibility to seek 
      information on all college and major requirements in the undergraduate 
      catalog to which you are assigned. Final confirmation of degree requirements is subject to approval 
      by the major department and Dean.
      </div>
  ";
  
  $w1 = 300;
  if (fp_screen_is_mobile()) $w1 = "90%";
  
  $login_box = "
      <table border='0' width='$w1' align='center' class='blueBorder' cellpadding='0' cellspacing='0'>
      <tr>
       <td class='blueTitle' align='center' height='20' colspan='2'>
       <span class='tenpt' style='color: white' ><b>Please login below...</b></span>
       </td>
      </tr>
      <tr>
      <td colspan=2> &nbsp;
      </td>
      </tr>
      <tr>
          <td align=center valign=top width='35%'>
            
            <span style='color: #660000; '><b>USER:</b></span></td><td valign=top><input type=text name='user_id' id='cwid_box'></td>
          </td>
        </tr>
        <tr>
          <td align=center valign=top>
            <span style='color: #660000; '><b>PASS:</b></span></td>
          <td valign=top><input type='password' name='password'>
          <!-- <br><span class='tenpt' ><a href='javascript: popupHelpWindow(\"help.php?i={$GLOBALS["fp_system_settings"]["login_help_page_id"]}\");' style='text-decoration:none;'>need help logging-in?</a></span> -->
            </td>
        </tr>
        <tr>
          <td align=center>
          </td>
          <td align=left>
        <br>     
        <input type='hidden' name='scrollTop' id='scrollTop'>   
              <input style='font-size: 12pt; color: #660000;' NAME='submit_fun' type='submit' value='Login' onClick='showUpdate(true);submitForm(false);'>
            
            
            <BR><br>
            
  
          </td>
        </tr>
      </table>
   ";
  
  
  $rtn .= "
      <form action='" . base_path() . "/perform-login' method='POST' id='mainform' onSubmit='showUpdate(true);'>  
    ";
  
  if (fp_screen_is_mobile()) {
    // the user is viewing this on a mobile device, so make it look
    // a bit nicer.
    //$pC .= $screen->draw_c_fieldset($important_notice, "View important notice", true);
    $rtn .= $login_box; 
  }
  else {
    // This is NOT mobile, this is a regular desktop browser.
    $rtn .= "
      <table border='0'>
      <tr>
       <td valign='top' width='40%'>
        $important_notice
       </td>
      <td valign='middle'>
        $login_box      
  
       </td>
      </tr>
     </table>
     ";
  }
  
  $rtn .= "
  </form>
  <br>$msg
  ";  
  
  
  return $rtn;
}


/**
 * Display the "main" tab-page for FlightPath.  Displays announcements
 * as well as the Tools menu, and the "special administrative tools" menu.
 */
function system_display_main_page() {
  $rtn = "";

  // If we are not logged in, then we need to re-direct the user to 
  // the login page!
  if ($_SESSION["fp_logged_in"] != TRUE) {
    fp_goto("login");
    return;  
  }


  
  if ($_SESSION["fp_user_type"] != "none") {
    //$rtn .= fp_render_currently_advising_box($true);
  }
  else {
    // Let the user they have no privileges in the system.
    $pC .= "        
         <div class='hypo tenpt' style='margin: 10px; padding: 10px;'>
           <div style='float:left; padding-right: 20px; height: 50px;'>
          <img src='" . fp_theme_location() . "/images/alert_lg.gif'>
           </div>
          <b>Please Note:</b>
          At this time, you do not have access to student records in FlightPath.
          However, you may still access certain Tools, listed below.  If you feel
          that you have reached this message in error, and you do require
          access to student records, please speak with your department head or the
          FlightPath administrator.
          </div>
        ";    
  }
  
  $rtn .= "<table class='fp-semester-table'>";
  
  fp_add_css(fp_get_module_path("system") . "/css/style.css");
  
  $announcements = system_render_announcements_block();
  $tools = fp_render_menu_block("Tools", "tools");
  $admin_tools = fp_render_menu_block("Administrative Tools", "admin-tools");
  
  if (fp_screen_is_mobile()) {
    $rtn .= "<tr><td colspan='2'>$announcements $tools $admin_tools</td></tr>";
  }
  else {
    $rtn .= "<tr><td width='50%' valign='top'  style='padding-right: 10px;'>
              $announcements
              </td><td width='50%' valign='top' style='padding-left: 10px;'>
                    $tools
                    $admin_tools
              </td></tr>";
  }
  
  $rtn .= "</table>";
  
  $rtn .= "<form id='mainform' method='POST'>
      <input type='hidden' id='scrollTop'>
      <input type='hidden' id='performAction' name='performAction'>
      <input type='hidden' id='advisingWhatIf' name='advisingWhatIf'>
      <input type='hidden' id='currentStudentID' name='currentStudentID'>
      </form>";

  //$pC .= $screen->get_javascript_code();


/*
  $screen->page_content = $pC;
  $screen->page_has_search = true;
  if ($_SESSION["fp_user_type"] == "student" || $_SESSION["fp_can_advise"] == false)
  {
    $screen->page_has_search = false;
  }
  $screen->build_system_tabs(0);

 */

  //admin_debug("--");
  //////////////////////////////////////////////////////////
  // To cut down on how long it takes to load huge groups
  // like Free Electives, we will pre-load some of the course inventory here.
  if ($_SESSION["fp_cached_inventory_flag_one"] != true)
  {
    $load_number = $GLOBALS["fp_system_settings"]["load_course_inventory_on_login_number"];
    if ($load_number > 1) {
      $fp = new FlightPath();
      $fp->cache_course_inventory(0,$load_number);
      $_SESSION["fp_cached_inventory_flag_one"] = true;
    }
  }
  //admin_debug("--");


  // send to the browser
  //$screen->output_to_browser();
  
  return $rtn;
  
}


/**
 * Get the current announcements (if any) and display them.
 */
function system_render_announcements_block() {
  $rtn = "";
  

  $rtn .= fp_render_curved_line("Announcements");

  $settings = fp_get_system_settings();

  $is_empty = true;
  // Pull out just the announcements XML and make it into its own array.
  if ($settings["announcements_xml"] != "")
  {
    if ($xml_array = fp_xml_to_array2($settings["announcements_xml"]))
    {
      // Expected format of the xmlArray:
      //[dt_timecode] = "announcement text."
      // ex: dt_111234432.  Use strtotime to convert.
      // It begins with dt_ because in XML the start of
      // an element must be a letter, not a number.

      krsort($xml_array);  // sort by most recent.

      foreach($xml_array as $datetime => $announcement)
      {
        $dt = str_replace("dt_", "", $datetime);

        $disp_time = date("D, M jS Y  - h:ia", $dt);
        // Re-enable HTML formatting in announcement...
        $temp = split(" ~~ ", $announcement);
        $visible = trim($temp[0]);
        $announcement_text = trim($temp[1]);
        //$announcement_text = $screen->convert_b_b_code_to_h_t_m_l($announcement_text);

        if ($visible == "hide")
        {
          // visibility set to "hidden"
          continue;
        }

        if ($visible == "faculty" && $_SESSION["fp_user_type"] == "student")
        { // skip faculty-only comments if we are a student!
          continue;
        }

        $rtn .= "<div class='announcement-text'>$announcement_text
              <div class='announcement-posted'>
                Posted $disp_time
              </div>
            </div>";
      }
    }
  }
  
  
  
  return $rtn;
}




/**
 * Called on every page load.
 */
function system_init() {
  // Let's see if the $user object (for the logged-in user) has been set up.
  global $user;
  $user = new stdClass();
  $user->id = 0;
  $user->name = "Anonymous";
  $user->rolls = array();
      
  if ($_SESSION["fp_logged_in"] == TRUE) {
    //pretty_print($_SESSION);
    $user->id = $_SESSION["fp_user_id"];
    $user->name = $_SESSION["fp_user_name"];
    $user->rolls = $_SESSION["fp_user_rolls"];    
  }
     
    
}




/**
 * Implementation of hook_menu().
 * This tells other parts of FlightPath where to display links
 * to this module, and what to include in the URL.
 *
 */
function OLD__system_menu() {
  
  $items = array();
  
  $items[] = array(
    "title" => "Edit FlightPath System Settings",
    "url" => get_module_action_u_r_l("system") . "&perform_action=edit_settings",
    "location" => "admin_console",
    "icon" => $GLOBALS["fp_system_settings"]["theme"] . "/images/toolbox.gif",
    "weight" => 100,
    "permission" => "de_can_administer_system_settings",
  );
  
$items[] = array(
    "title" => "Edit FlightPath Modules",
    "url" => get_module_action_u_r_l("system") . "&perform_action=edit_modules",
    "location" => "admin_console",
    "icon" => $GLOBALS["fp_system_settings"]["theme"] . "/images/toolbox.gif",
    "weight" => 200,
    "permission" => "de_can_administer_system_settings",
  );  
    
  return $items;
}



/**
 * This function will actually go through the POST and save to our
 * flightpath_system table.
 *
 */
function system_perform_submit_settings() {
  
  $db = get_global_database_handler();
  $csv_to_array = $_SESSION["fp_system"]["csv_to_array"];
  
  $ignore_in_post = array("submit", "perform_action", "n");  
  
  foreach ($_POST as $name => $value) {
    if (in_array($name, $ignore_in_post)) continue;
    
    $ser_value = serialize($value);
    // We were supposed to convert this back to an array first?
    if (in_array($name, $csv_to_array)) {
      $new_array = array();
      $temp = explode(",", $value);
      foreach ($temp as $t) {
        $new_array[] = trim($t);
      }
      $ser_value = serialize($new_array);
    }
    
    // Alright, let's insert!
    $res = $db->db_query("REPLACE INTO flightpath_system_settings (name, value)
	                            VALUES ('?', '?') ", $name, $ser_value);
       
  }
  
  // Reload back into the GLOBALS array...
  $res = $db->db_query("SELECT * FROM flightpath_system_settings");
  while ($cur = $db->db_fetch_array($res)) {
    if ($val = unserialize($cur["value"])) {
      $GLOBALS["fp_system_settings"][$cur["name"]] = $val;
    }
  }  
  
  
  system_display_settings_form("<font color='green'>Settings successfully saved on " .date ("g:i:sa") . ".</font><br><br>");
  
  
}



function system_perform_submit_modules() {
  $db = get_global_database_handler();
  
  $modules = array();
  
  foreach ($_POST as $name => $value) {
    
    if (strstr($name, "module~~_~~")) {
      $module = $value;
      
      $path = $_POST["path~~_~~$module"];
      $version = $_POST["version~~_~~$module"];
      $requires = $_POST["requires~~_~~$module"];
      $weight = $_POST["weight~~_~~$module"];
      $name = $_POST["name~~_~~$module"];
      
      $disabled = "no";
      $enabled = $_POST["enabled~~_~~$module"];
      if ($enabled != "yes") {
        $disabled = "yes";
      }
      
      // Okay, let's put everything into our modules array.
      $modules[$module] = array(
        "path" => $path,
        "version" => $version,
        "requires" => $requires,
        "disabled" => $disabled,
        "weight" => $weight,
        "name" => $name,
      );
      
    }
    
  }
  
  // Okay, now, serialize and add to our settings.
  $ser_value = serialize($modules);
  
  $res = $db->db_query("REPLACE INTO flightpath_system_settings (name, value)
	                            VALUES ('modules', '?') ", $ser_value);
  
  
  // Reload back into the GLOBALS array...
  $res = $db->db_query("SELECT * FROM flightpath_system_settings WHERE name='modules' ");
  $cur = $db->db_fetch_array($res);
  if ($val = unserialize($cur["value"])) {
    $GLOBALS["fp_system_settings"]["modules"] = $val;
  }

  
  
  system_display_modules_form("<font color='green'>Modules successfully saved on " .date ("g:i:sa") . ".</font><br><br>");
    
  
  
}


/**
 * Similar to the modules page on Drupal, this page will scan various
 * directories, looking for modules (denoted by their .info files)
 * and present them to the user to enable or disable.
 * 
 * Core modules cannot be disabled.
 *
 * @param string $msg
 */
function system_display_modules_form($msg = "") {
  $module_action_u_r_l = get_module_action_u_r_l("system");
  $pC = "";
  // for typing convenience...  
  $g = $GLOBALS["fp_system_settings"];
  
  $pC .= "<a class='tenpt' href='admin.php'>Back to main menu.</a><br>";
  $pC .= "<h2>FlightPath Modules</h2>$msg
          Use this form to enable or disable modules.  This scans the /modules/  and then /custom/modules/
          directories.
          <hr>
          <form action='$module_action_u_r_l' method='POST'>
          <input type='hidden' name='n' value='system'>
                    
          ";  
  
  // Begin by scanning the /modules/ directory.  Anything in there
  // cannot be disabled.
  $module_dirs = array();
  $module_dirs[] = array("start" => "modules", "type" => "_core");
  $module_dirs[] = array("start" => "custom/modules", "type" => "_custom");
    
  foreach ($module_dirs as $module_dir) {
    $start_dir = $module_dir["start"];
     
    if ($dh = opendir($start_dir)) {
      $pC .= "<div class='fp-system-modules-type'>{$module_dir["type"]}</div>
              <table class='fp-system-modules-table' cellpadding='0' cellspacing='0'>";
      $pol = "even";
      while ($file = readdir($dh)) {    
        if ($file == "." || $file == "..") continue;
        
        if (is_dir($start_dir . "/" . $file)) {  
         
          // Okay, now look inside and see if there is a .info.xml file.
          if (file_exists("$start_dir/$file/$file.info.xml")) {
            $module = $file;
            $info_xml = file_get_contents("$start_dir/$file/$file.info.xml");
            
            if (!strstr($info_xml, "<module>")) {
              print "<div>Error in $file.info.xml.  You MUST have &lt;module&gt;
                      and &lt;/module&gt; tags around your XML.</div>";
              continue;
            }
            
            $xml_array = fp_xml_to_array2($info_xml);
            //var_dump($xml_array);
            $checked = "";
            
            if (isset($g["modules"][$file]["disabled"]) && $g["modules"][$file]["disabled"] != "yes") {
              $checked = "checked=checked";              
            }
            
            $cb = "<input type='checkbox' name='enabled~~_~~$file' value='yes' $checked>";
            
            if ($xml_array["required"] == "true") {
              // Required!  Must be enabled and readonly.
              $cb = "<input type='checkbox' name='temp' value='' checked=checked disabled=disabled>
                     <input type='hidden' name='enabled~~_~~$file' value='yes'>";
            }
            
            $requires = "";
            if ($xml_array["requires"] != "") {
              $requires = "<div class='fp-system-modules-requires hypo'>
                            <b>Requires:</b> {$xml_array["requires"]}
                           </div>";
            }
            
            $html_safe_name = htmlspecialchars($xml_array["name"], ENT_QUOTES);
            
            $hidden_vars = "
              <input type='hidden' name='module~~_~~$file' value='$file'>
              <input type='hidden' name='path~~_~~$file' value='$start_dir/$file'>
              <input type='hidden' name='version~~_~~$file' value='{$xml_array["version"]}'>
              <input type='hidden' name='requires~~_~~$file' value='{$xml_array["requires"]}'>
              <input type='hidden' name='weight~~_~~$file' value='{$xml_array["weight"]}'>
              <input type='hidden' name='name~~_~~$file' value='$html_safe_name'>
            ";
            
            $pC .= "<tr class='fp-system-modules-row fp-system-modules-row-$pol'>";
            
            $pC .= "<td width='35%'><label>
                        $cb $hidden_vars ";
            $pC .= "   {$xml_array["name"]}
                        <div class='fp-system-modules-machine-name'>$file</div></label></td>
                    <td width='5%'>{$xml_array["version"]}</td>
                    <td>{$xml_array["description"]}$requires</td>";
            $pC .= "</tr>";
            
            $pol = ($pol == "even") ? "odd" : "even";
            
          } // if file_exists (xml file)        
        } // if is_dir      
      } // while file=readdir
      $pC .= "</table>";
    } // if opendir($startdir)
  }// foreach moduledirs
  
  
  
  $pC .= "<input type='hidden' name='performAction' value='performSubmitModules'>
          <input type='submit' value='Submit'>
          </form>";
  
	$screen = new AdvisingScreen("",null,"not_advising");
	
	$screen->add_css(get_module_path("system") . "/css/style.css");
	
	$screen->page_content = $pC;
	$screen->output_to_browser();	  
}


/**
 * This function will display the settings for to the user, so
 * they may edit it.
 *
 */
function system_display_settings_form($msg = "") {

  $module_action_u_r_l = get_module_action_u_r_l("system");
    
  $pC = "";
  
  // Wipe out our old csvToArray list...
  unset($_SESSION["fp_system"]["csv_to_array"]);
  
  // for typing convenience...  
  $g = $GLOBALS["fp_system_settings"];
  
  $pC .= "<a class='tenpt' href='admin.php'>Back to main menu.</a><br>";
  $pC .= "<h2>FlightPath System Settings</h2>$msg
          Use this form to alter the various system settings in FlightPath.
          Before making changes, it is always good policy to first back up
          your database (or at least the flightpath_system_settings table).
          <hr>
          <form action='$module_action_u_r_l' method='POST'>
          <input type='hidden' name='n' value='system'>
          ";
  
  
  $pC .= system_build_element("contact_email_address", "", "", 
                "Enter the email address to mail when someone uses
                the Contact FlightPath Production Team popup.");
  
  $pC .= system_build_element("self_u_r_l", "", "URL to FlightPath", 
                "Enter the URL (including http:// or https://) to access
                FlightPath.  Do not use redirects; enter the true URL.");

/*       
  $pC .= system_build_element("fileSystemPath", "", "File Path to FlightPath", 
                "Enter the file system path to FlightPath.  Do not include
                a trailing slash!<br>
                Ex: /www/webservices/flightpath");
*/
                
  $pC .= system_build_element("theme", "", "Theme location", "Enter the file location for your theme. Do not put preceeding or trailing slashes.  Ex: themes/classic");
  
  $pC .= system_build_element("school_initials", "", "School initials", "Ex: ULM or BPCC");
  
  $pC .= system_build_element("login_help_page_id", "", "", "This is the ID# of the help page for login help.  It is used when constructing the 'Need help logging-in?' link.  To use, you will need to create a help page for login instructions, then place its ID here.");
  
  $pC .= system_build_element("earliest_catalog_year", "", "", 
                "This is the earliest possible catalog year FlightPath may look 
                up.  Typically, this is the earliest year for which you have 
                data (ie, when FlightPath went online.
                If FlightPath cannot figure out a catalog year to use,
                it will default to this one.");
  
  $pC .= system_build_element("graduate_level_course_num", "", "", 
                "This is the course num which means 'graduate level', meaning
                anything above it is considered a graduate level course.");  
  
  $pC .= system_build_element("allowed_student_ranks", "", "Allowed student ranks (CSV)", 
                "This is a list of which student ranks are allowed into FlightPath.
                It should be separated by commas.  These ranks should exactly match
                the rankCode from the human_resources:students table.
                This also affects which students you may search for on the Advisees
                tab (in studentsearch.php).", "", TRUE);  
  
  $pC .= system_build_element("extra_student_search_conditions", "textarea", "", 
                "This is mysql which will get appended to end end of the WHERE clause of every query
  relating to search for students.  It is so you can easily add global conditions, for example,
  to check that the students are admitted or enrolled.  See the studentsearch.php to see
  its use.  If this setting is not sufficient for customizing the student search, you will
  need to use the hooks system to simply override the various functions there.
  example:  \" AND (admitted = '1' OR enrolled = '1') \"");  
                
  $pC .= system_build_element("enrolled_student_search_conditions", "textarea", "", 
                "  Similar to the one above it, this is a clause which will only bring up students
  who are enrolled at the university, and taking courses.  This might be identical to the
  one above it.  At the moment, this is only being used in the Stats module, and not
  for any logic in FlightPath, so you might consider it optional.");  
  
                
                
  $pC .= system_build_element("not_allowed_student_message", "textarea", "", 
                "When a student is NOT allowed into FlightPath because of their
                rank, this message will be displayed.");  

  $pC .= system_build_element("hiding_grades_message", "textarea", "", 
                "This message will be displayed when any course on the page
                has its boolHideGrade set to TRUE.  If you are not using
                this functionality, you can leave this blank.");  
                

  $pC .= system_build_element("notify_apply_draft_changes_email_address", "", "Email to notify when draft changes have been applied", 
                "Enter 1 or more email addresses here to notify when
                draft changes are applied from admin.php.  Leave blank to disable.");  
                
  $pC .= system_build_element("notify_my_s_q_l_error_email_address", "", "Email to notify when a mysql error occurs", 
                "Enter 1 or more email addresses here to notify when
                a mysql error occurs.  Leave blank to disable.");  

  $pC .= system_build_element("display_my_s_q_l_errors", "boolean", "", 
                "If TRUE, FlightPath will display MySQL error messages on screen.");  

  $pC .= system_build_element("disable_debug_c_t", "boolean", "", 
                "If TRUE, FlightPath will not display 'fpDebugCT' messages.");  
  $pC .= system_build_element("disable_admin_debug", "boolean", "", 
                "If TRUE, FlightPath will not display 'adminDebug' messages.");  

  $pC .= system_build_element("admin_transfer_passcode", "", "", 
                "Enter a passcode (ie, password) which a Data Entry user must
                  enter in order to apply draft changes to FlightPath.  This
                  is an added security measure. Ex: p@ssWord3356");  
                
  $pC .= system_build_element("retake_grades", "", "Retake grades (CSV)", 
                "List grades, separated by comma, which means 'the student must
                retake this course. They did not earn credit.' Ex: F,W,I ", "", TRUE);  
                
  $pC .= system_build_element("enrolled_grades", "", "Enrolled grades (CSV)", 
                "List grades, separated by comma, which means 'the student is 
                currently enrolled in this course.' Ex: E,AMID,BMID ", "", TRUE);  
                  

  $pC .= system_build_element("b_or_better", "", "B or better (CSV)", 
                "List grades, separated by comma, 
                which are either a B or better. ", "", TRUE);  
                
  $pC .= system_build_element("c_or_better", "", "C or better (CSV)", 
                "List grades, separated by comma, 
                which are either a C or better. ", "", TRUE);  

  $pC .= system_build_element("d_or_better", "", "D or better (CSV)", 
                "List grades, separated by comma, 
                which are either a D or better. ", "", TRUE);  

  $pC .= system_build_element("ignore_courses_from_hour_counts", "", "Ignore courses from hour counts (CSV)", 
                "List courses, separated by comma, 
                which should be ignored in hours counts.  This helps
                remedial courses from being applied to hour counts.
                Ex: MATH 093, ENGL 090, UNIV 1001 ", "", TRUE);  
  

  $pC .= system_build_element("term_id_structure", "textarea", "Structure of termID's:", 
                "Use this space to define termID structures, one per line.
                Please see the FlightPath documentation on how to set up this field.
                <br>Ex: 
                <br>[Y4]60, Spring, Spring of [Y4], Spr '[Y2]
                <br>[Y4]40, Fall, Fall of [Y4-1], Fall '[Y2-1]
                ");  

                
                
                
  $pC .= "<input type='hidden' name='performAction' value='performSubmitSettings'>
          <input type='submit' value='Submit'>
          </form>";
  
	$screen = new AdvisingScreen("",null,"not_advising");
	
	$screen->add_css(get_module_path("system") . "/css/style.css");
	
	$screen->page_content = $pC;
	$screen->output_to_browser();	
  
}


/**
 * Construct an HTML element and return it.
 *
 */
function system_build_element($name, $type = "", $label = "", $description = "", $default_value = "", $csv_to_array = FALSE) {
  
  $rtn = "";
  
  if (!$default_value) {
    $default_value = $GLOBALS["fp_system_settings"][$name];
  }
  
  if (is_array($default_value)) {
    $default_value = @join(", ", $default_value);
  }
  
  if (!$type) {
    $type = "textfield";
  }
  
  if (!$label) {
    $label = $name;
  }
  
  
  if ($type == "textfield") {
    $rtn .= "<div class='fp-system-settings-element fp-system-settings-textfield'>
              <label>$label:</label>
                <div class='fp-system-settings-input'>
                  <input type='textfield' name='$name' value='$default_value'>
                </div>
              ";
    if ($description) {
      $rtn .= "<div class='fp-system-settings-element-description'>$description</div>";
    }
    $rtn .= "</div>";
  }
  
  
  if ($type == "textarea") {
    $rtn .= "<div class='fp-system-settings-element fp-system-settings-textarea'>
              <label>$label:</label>
                <div class='fp-system-settings-input'>
                  <textarea name='$name'>$default_value</textarea>
                </div>
              ";
    if ($description) {
      $rtn .= "<div class='fp-system-settings-element-description'>$description</div>";
    }
    $rtn .= "</div>";
    
  }
  
  if ($type == "boolean") {
    $sel_f = $sel_t = "";
    if ($default_value) {
      $sel_t = "selected";
    }    
    $rtn .= "<div class='fp-system-settings-element fp-system-settings-boolean'>
              <label>$label:</label>
                <div class='fp-system-settings-input'>
                  <select name='$name'>
                    <option value='' $sel_f>FALSE</option>
                    <option value='1' $sel_t>TRUE</option>
                  </select>
                </div>
              ";
    if ($description) {
      $rtn .= "<div class='fp-system-settings-element-description'>$description</div>";
    }
    $rtn .= "</div>";
    
  }
  
  // We need to convert this CSV back into an array when we save it!
  if ($csv_to_array) {
    if (!isset($_SESSION["fp_system"]["csv_to_array"])) {
      $_SESSION["fp_system"]["csv_to_array"] = array();
    }
    // Add to our list.
    $_SESSION["fp_system"]["csv_to_array"][] = $name;
  }
  
  
  return $rtn;
}
